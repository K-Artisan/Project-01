<%@ Template Language="C#" TargetLanguage="C#" Debug="True" Encoding="UTF-8" %>

<%@ Assembly Src="..\Common\Model.cs" %>
<%@ Assembly Src="..\Common\Extensions.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Entity" Type="SchemaMapper.Entity"  %>
<%@ Property Name="Namespace" Type="System.String" %>
<%-- Safe类名 --%>
<% string SafeClassName = Entity.ClassName.ToSafeName(); %>
<%-- 描述 --%>
<% string Description = Entity.Description; %>
using System;
using System.Collections.Generic;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using <%= Namespace %>.Services.Dtos;
using <%= Namespace %>.Tests.Models.<%= SafeClassName.ToPlural() %>;

namespace <%= Namespace %>.Tests.Integration.Dtos {
    /// <summary>
    /// <%= Description %>数据传输对象测试
    /// </summary>
    [TestClass]
    public class <%= SafeClassName %>DtoTest {
        /// <summary>
        /// 创建<%= Description %>数据传输对象
        /// </summary>
        public static <%= SafeClassName %>Dto Create() {
            return <%= SafeClassName %>Test.Create().ToDto(); 
        }
        
        /// <summary>
        /// 创建<%= Description %>数据传输对象2
        /// </summary>
        /// <param name="id"><%= Description %>编号</param>
        public static <%= SafeClassName %>Dto Create2( <%= Entity.GetId().TypeName %> id ) {
            return <%= SafeClassName %>Test.Create2( id ).ToDto(); 
        }
        
        /// <summary>
        /// 创建<%= Description %>数据传输对象列表
        /// </summary>
        public static List<<%= SafeClassName %>Dto> CreateList() {
            return new List<<%= SafeClassName %>Dto>() {
                Create(),
                Create2( <%= SafeClassName %>Test.Id2 )
            };
        }
        
        /// <summary>
        /// 转换为数据传输对象
        /// </summary>
        [TestMethod]
        public void TestToDto() {
            var dto = Create();
        <% foreach(Property p in Entity.Properties) { %>
        <% if( p.IsPrimaryKey.SafeValue() ) { %>
            Assert.AreEqual( <%= SafeClassName %>Test.Id<%= Entity.GetToDtoConvert() %>,dto.Id,"Id" );
        <% continue;}%>
            Assert.AreEqual( <%= SafeClassName %>Test.<%= p.ColumnName %>,dto.<%= p.ColumnName %>,"<%= p.ColumnName %>" );
        <% }%>
        }
        
        /// <summary>
        /// 转换为实体
        /// </summary>
        [TestMethod]
        public void TestToEntity() {
            var entity = Create().ToEntity();
        <% foreach(Property p in Entity.Properties) { %>
        <% if( p.IsPrimaryKey.SafeValue() ) { %>
            Assert.AreEqual( <%= SafeClassName %>Test.Id,entity.Id,"Id" );
        <% continue;}%>
            Assert.AreEqual( <%= SafeClassName %>Test.<%= p.ColumnName %>,entity.<%= p.ColumnName %>,"<%= p.ColumnName %>" );
        <% }%>
        }
    }
}
