<%@ Template Language="C#" TargetLanguage="Text" Debug="True" OutputType="None"  %>

<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="CodeSmith.CustomProperties" %>
<%@ Assembly Name="Mono.Cecil" Path="..\Libraries" %>
<%@ Assembly Name="ICSharpCode.NRefactory" Path="..\Libraries" %>
<%@ Assembly Name="ICSharpCode.NRefactory.CSharp" Path="..\Libraries" %>
<%@ Assembly Src="Common\Model.cs" %>
<%@ Assembly Src="Common\Extensions.cs" %>
<%@ Assembly Src="Common\Generator.cs" %>
<%@ Assembly Src="Common\Parser.cs" %>

<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="System.IO" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="SchemaMapper" %>

<%@ Property Name="Database"
             Type="SchemaExplorer.DatabaseSchema"
             Category="1.数据库"
             OnChanged="OnSourceDatabaseChanged"
             Description="数据库" %>
<%@ Property Name="Namespace"
             Type="System.String"
             Category="2.1 命名空间"
             Description="命名空间"%>
<%@ Property Name="DbName"
             Type="System.String"
             Category="2.2 数据库名"
             Description="数据库名称,用于创建工作单元及其它类型名称，设置.将自动获取数据库名"%>

<%@ Property Name="TableNaming"
             Type="SchemaMapper.TableNaming"
             Category="3.Hints"
             Default="Singular"
             Description="Provide generator a hint as to how the tables are named." %>
<%@ Property Name="EntityNaming"
             Type="SchemaMapper.EntityNaming"
             Category="3.Hints"
             Default="Singular"
             Description="Tell generator how the entities are to be named." %>
<%@ Property Name="RelationshipNaming"
             Type="SchemaMapper.RelationshipNaming"
             Category="3.Hints"
             Default="Plural"
             Description="Tell generator how the relationships are to be named." %>
<%@ Property Name="ContextNaming"
             Type="SchemaMapper.ContextNaming"
             Category="3.Hints"
             Default="Plural"
             Description="Tell generator how the context properties are to be named." %>

<%@ Property Name="IgnoreList"
             Type="CodeSmith.CustomProperties.StringCollection"
             Category="4.Customization"
             Default="sysdiagrams$"
             Optional="True"
             Description="List of regular expressions to ignore tables, views and commands when generating mapping." %>
<%@ Property Name="InclusionMode"
             Type="Boolean"
             Category="4.Customization"
             Default="False"
             Optional="True"
             Description="Change the IgnoreList to be a list of table to include instead of ignore." %>
<%@ Property Name="CleanExpressions"
             Type="CodeSmith.CustomProperties.StringCollection"
             Category="4.Customization"
             Default="^(sp|tbl|udf|vw)_"
             Optional="True"
             Description="List of regular expressions to clean table, view and column names." %>

<%@ Register Name="IUnitOfWorkClass"
             Template="Internal\IUnitOfWork.cst"
             MergeProperties="False" %>
<%@ Register Name="UnitOfWorkClass"
             Template="Internal\UnitOfWork.cst"
             MergeProperties="False" %>
<%@ Register Name="MySqlUnitOfWorkClass"
             Template="Internal\UnitOfWork_MySql.cst"
             MergeProperties="False" %>
<%@ Register Name="RepositoryBaseClass"
             Template="Internal\RepositoryBase.cst"
             MergeProperties="False" %>
<%@ Register Name="IRepositoryClass"
             Template="Internal\IRepository.cst"
             MergeProperties="False" %>
<%@ Register Name="EntityGeneratedClass"
             Template="Internal\Entity.Generated.cst"
             MergeProperties="False" %>
<%@ Register Name="EntityEditableClass"
             Template="Internal\Entity.Editable.cst"
             MergeProperties="False" %>
<%@ Register Name="MappingClass"
             Template="Internal\Mapping.cst"
             MergeProperties="False" %>
<%@ Register Name="MappingMySqlClass"
             Template="Internal\Mapping_MySql.cst"
             MergeProperties="False" %>
<%@ Register Name="RepositoryClass"
             Template="Internal\Repository.cst"
             MergeProperties="False" %>
<%@ Register Name="IServiceClass"
             Template="Internal\IService.cst"
             MergeProperties="False" %>
<%@ Register Name="ServiceClass"
             Template="Internal\Service.cst"
             MergeProperties="False" %>
<%@ Register Name="DtoClass"
             Template="Internal\Dto.cst"
             MergeProperties="False" %>
<%@ Register Name="DtoExtensionClass"
             Template="Internal\DtoExtension.cst"
             MergeProperties="False" %>
<%@ Register Name="QueryObjectClass"
             Template="Internal\QueryObject.cst"
             MergeProperties="False" %>
<%@ Register Name="IocConfigClass"
             Template="Internal\IocConfig.cst"
             MergeProperties="False" %>
<%@ Register Name="EntityTestClass"
             Template="Internal\EntityTest.cst"
             MergeProperties="False" %>
<%@ Register Name="EntityTestDataClass"
             Template="Internal\EntityTest.Data.cst"
             MergeProperties="False" %>
<%@ Register Name="DtoTestClass"
             Template="Internal\DtoTest.cst"
             MergeProperties="False" %>
<%@ Register Name="ServiceTestClass"
             Template="Internal\ServiceTest.cst"
             MergeProperties="False" %>
<%@ Register Name="ControllerClass"
             Template="Internal\Controller.cst"
             MergeProperties="False" %>
<%@ Register Name="IndexViewClass"
             Template="Internal\View.Index.cst"
             MergeProperties="False" %>
<%@ Register Name="QueryFormViewClass"
             Template="Internal\View.QueryForm.cst"
             MergeProperties="False" %>
<%@ Register Name="FormViewClass"
             Template="Internal\View.Form.cst"
             MergeProperties="False" %>
<%@ Register Name="DetailViewClass"
             Template="Internal\View.Detail.cst"
             MergeProperties="False" %>
<%@ Register Name="GridControllerClass"
             Template="Internal\Controller.Grid.cst"
             MergeProperties="False" %>
<%@ Register Name="GridIndexViewClass"
             Template="Internal\View.Grid.Index.cst"
             MergeProperties="False" %>
<%@ Register Name="DetailIndexViewClass"
             Template="Internal\View.Detail.Index.cst"
             MergeProperties="False" %>
<%@ Register Name="DetailFormViewClass"
             Template="Internal\View.Detail.Form.cst"
             MergeProperties="False" %>
<% Generate(); %>

<script runat="template">
    public void Generate()
    {
        //创建生成器
        Generator generator = new Generator();        
        
        //设置命名规则
        generator.Settings.TableNaming = TableNaming;
        generator.Settings.EntityNaming = EntityNaming;
        generator.Settings.RelationshipNaming = RelationshipNaming;
        generator.Settings.ContextNaming = ContextNaming;        
        
        //设置忽略列表
        foreach(string s in IgnoreList)
          if (!string.IsNullOrEmpty(s))
            generator.Settings.IgnoreExpressions.Add(s);        
        foreach(string s in CleanExpressions)
          if (!string.IsNullOrEmpty(s))
            generator.Settings.CleanExpressions.Add(s);          
        
        //设置项处理完成事件
        generator.SchemaItemProcessed += OnSchemaItemProcessed;
          
        //获取实体上下文
        EntityContext context = generator.Generate(Database);
        
        //创建工作单元接口
        CreateIUnitOfWork(context);
        //创建工作单元
        CreateUnitOfWork(context);
        //创建MySql工作单元
        CreateMySqlUnitOfWork(context);
        //创建仓储基类
        CreateRepositoryBase(context);
        //创建仓储接口
        CreateIRepository(context);
        //创建实体
        CreateEntity(context);
        //创建查询实体
        CreateQueryObject( context );
        //创建映射
        CreateMapping(context);
        //创建MySql映射
        CreateMySqlMapping(context);
        //创建仓储
        CreateRepository( context );
        //创建应用服务接口
        CreateIService( context );
        //创建应用服务实现
        CreateService( context );
        //创建Dto
        CreateDto( context );
        //创建Dto扩展
        CreateDtoExtension( context );       
        //创建Ioc配置
        CreateIocConfig( context );
        //创建实体测试
        CreateEntityTest( context );
        //创建实体测试数据
        CreateEntityTestData( context );
        //创建Dto测试
        CreateDtoTest( context );
        //创建应用服务测试
        CreateServiceTest( context );   
        //创建控制器
        CreateController( context );
        //创建Index视图
        CreateIndexView( context );
        //创建查询表单视图
        CreateQueryFormView( context );
        //创建表单视图
        CreateFormView( context );
        //创建详细视图
        CreateDetailView( context );
        //创建控制器-表格操作
        CreateGridController( context );
        //创建Index视图-表格操作
        CreateGridIndexView( context );
        //创建查询表单视图-表格操作
        CreateGridQueryFormView( context );
        //创建Index视图-行内编辑操作
        CreateDetailIndexView( context );
        //创建表单视图-行内编辑操作
        CreateDetailFormView( context );
          
        //注册引用
        this.RegisterReference("System.Configuration");
        this.RegisterReference("System.Data");
        this.RegisterReference("System.Data.Entity");
        this.RegisterReference("System.Runtime.Serialization");
        this.RegisterReference("EntityFramework");
    }

    //创建工作单元接口
    public void CreateIUnitOfWork(EntityContext entityContext)
    {
        IUnitOfWorkClass context = this.Create<IUnitOfWorkClass>();
        this.CopyPropertiesTo(context);
        string className = "I" + GetUnitOfWork(entityContext);
        context.UnitOfWork = className;
        context.Namespace = GetIUnitOfWorkNamespace(entityContext);
        context.RenderToFile(GetPath(className,"Infrastracture"), true);
    }
    
    /// <summary>
    /// 获取工作单元接口命名空间
    /// </summary>
    private string GetIUnitOfWorkNamespace(EntityContext entityContext){
        return Namespace == "." ? StringUtil.ToPlural( GetDbName(entityContext) ) : Namespace;
    }
    
    //创建工作单元
    public void CreateUnitOfWork(EntityContext entityContext)
    {
        UnitOfWorkClass context = this.Create<UnitOfWorkClass>();
        this.CopyPropertiesTo(context);
        string className = GetUnitOfWork(entityContext);
        context.UnitOfWork = className;
        context.EntityContext = entityContext;
        context.DbName = GetDbName( entityContext );
        context.Namespace = GetNamespace( entityContext.Entities.FirstOrDefault() );
        context.IUnitOfWorkNamespace = GetIUnitOfWorkNamespace(entityContext);
        context.RenderToFile(GetPath(className,"Datas"), true);
    }
    
    //获取路径
    private string GetPath( string className,string directory = "",string extension = "cs" ){
        string path = Path.GetFullPath(@".\02-Result");
        if( string.IsNullOrWhiteSpace( directory ) == false )
            path += @"\" + directory;
        string file = className + "." + extension;
        return Path.Combine(path, file);
    }
    
    /// <summary>
    /// 获取数据库名称
    /// </summary>
    private string GetDbName( EntityContext entityContext ){
        if( DbName == "." )
            return entityContext.DatabaseName;
        return DbName;
    }
    
    /// <summary>
    /// 获取工作单元名称
    /// </summary>
    private string GetUnitOfWork( EntityContext entityContext ){
        return GetDbName(entityContext) + "UnitOfWork";
    }
    
    /// <summary>
    /// 获取架构名
    /// </summary>
    private string GetSchema( Entity entity ){
        if( string.IsNullOrWhiteSpace( entity.TableName ) )
            return "default";
        return entity.TableSchema;
    }
    
    /// <summary>
    /// 获取命名空间
    /// </summary>
    private string GetNamespace( Entity entity ){
        return Namespace;
    }
    
    //创建MySql工作单元
    public void CreateMySqlUnitOfWork(EntityContext entityContext)
    {
        MySqlUnitOfWorkClass context = this.Create<MySqlUnitOfWorkClass>();
        this.CopyPropertiesTo(context);
        string className = GetUnitOfWork(entityContext);
        context.UnitOfWork = className;
        context.EntityContext = entityContext;
        context.DbName = GetDbName( entityContext );
        context.Namespace = GetNamespace( entityContext.Entities.FirstOrDefault() );
        context.IUnitOfWorkNamespace = GetIUnitOfWorkNamespace(entityContext);
        context.RenderToFile(GetPath( "MySql" + className,"Datas\\MySql"), true);
    }
    
    //创建仓储基类
    public void CreateRepositoryBase(EntityContext entityContext)
    {
        RepositoryBaseClass context = this.Create<RepositoryBaseClass>();
        this.CopyPropertiesTo(context);
        string className = "RepositoryBase"; 
        context.UnitOfWork = GetUnitOfWork( entityContext );
        context.Namespace = GetNamespace( entityContext.Entities.FirstOrDefault() );
        context.IUnitOfWorkNamespace = GetIUnitOfWorkNamespace(entityContext);
        context.RenderToFile(GetPath(className,"Datas\\Repositories"), true);
    }
    
    //创建仓储接口
    public void CreateIRepository(EntityContext entityContext){
        IRepositoryClass result = this.Create<IRepositoryClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "I{0}Repository", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);            
            result.RenderToFile(GetPath(className,"Domains\\Repositories"), true);
        }        
    }
    
    //创建实体
    public void CreateEntity(EntityContext entityContext)
    {
        EntityGeneratedClass generatedClass = this.Create<EntityGeneratedClass>();
        this.CopyPropertiesTo(generatedClass);
        EntityEditableClass editableClass = this.Create<EntityEditableClass>();
        this.CopyPropertiesTo(editableClass);
        foreach(Entity entity in entityContext.Entities)
        {
            //创建可编辑文件
            string className = entity.ClassName;
            editableClass.Entity = entity;
            editableClass.Namespace = GetNamespace(entity);
            string editablePath = GetPath(className,"Domains\\Models");
            editableClass.RenderToFile(editablePath, true);
            
            //创建基础文件
            generatedClass.Entity = entity;
            generatedClass.Namespace = GetNamespace(entity);
            generatedClass.RenderToFile(GetPath(className+ ".Base","Domains\\Models"), editablePath, true);
        }
    }
    
    //创建查询实体
    public void CreateQueryObject(EntityContext entityContext)
    {
        QueryObjectClass result = this.Create<QueryObjectClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}Query", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.RenderToFile(GetPath(className,"Domains\\Queries"), true);
        }
    }

    //创建映射
    public void CreateMapping(EntityContext entityContext)
    {
        MappingClass result = this.Create<MappingClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}Map", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.RenderToFile(GetPath(className,"Datas\\Mappings\\" + GetSchema(entity) ), true);
        }
    }
    
    //创建MySql映射
    public void CreateMySqlMapping(EntityContext entityContext)
    {
        MappingMySqlClass result = this.Create<MappingMySqlClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}Map", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.RenderToFile(GetPath(className,"Datas\\MySql\\Mappings\\" + GetSchema(entity) ), true);
        }
    }
    
    //创建仓储
    public void CreateRepository(EntityContext entityContext)
    {
        RepositoryClass result = this.Create<RepositoryClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}Repository", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.UnitOfWork = GetUnitOfWork(entityContext);
            result.IUnitOfWorkNamespace = GetIUnitOfWorkNamespace(entityContext);
            result.RenderToFile(GetPath(className,"Datas\\Repositories\\" + GetSchema(entity) ), true);
        }
    }
    
    //创建应用服务接口
    public void CreateIService(EntityContext entityContext)
    {
        IServiceClass result = this.Create<IServiceClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "I{0}Service", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.RenderToFile(GetPath(className,"Services\\Contracts\\" + GetSchema(entity) ), true);
        }
    }
    
    //创建应用服务实现
    public void CreateService(EntityContext entityContext)
    {
        ServiceClass result = this.Create<ServiceClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}Service",entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.UnitOfWork = GetUnitOfWork(entityContext);
            result.IUnitOfWorkNamespace = GetIUnitOfWorkNamespace(entityContext);
            result.RenderToFile(GetPath(className,"Services\\Impl\\" + GetSchema(entity) ), true);
        }
    }
    
    //创建Dto
    public void CreateDto(EntityContext entityContext)
    {
        DtoClass result = this.Create<DtoClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}Dto", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.RenderToFile(GetPath(className,"Services\\Dtos\\" + GetSchema(entity) ), true);
        }
    }
    
    //创建Dto扩展
    public void CreateDtoExtension(EntityContext entityContext)
    {
        DtoExtensionClass result = this.Create<DtoExtensionClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}DtoExtension", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.RenderToFile(GetPath(className,"Services\\Dtos\\" + GetSchema(entity)), true);
        }
    }
    
    //创建Ioc配置
    public void CreateIocConfig(EntityContext entityContext)
    {
        IocConfigClass result = this.Create<IocConfigClass>();
        this.CopyPropertiesTo(result);
        string className = string.Format( "{0}Config", GetDbName(entityContext) );
        result.EntityContext = entityContext;
        result.Namespace = GetNamespace(entityContext.Entities.First());
        result.DbName = GetDbName(entityContext);
        result.RenderToFile(GetPath(className,"Services\\Configs\\IocConfigs"), true);
    }
    
    //创建实体测试
    public void CreateEntityTest(EntityContext entityContext)
    {
        EntityTestClass result = this.Create<EntityTestClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}Test", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.RenderToFile(GetPath(className,"Tests\\UnitTests\\Models\\" + entity.ClassName.ToPlural() ), true);
        }
    }
    
    //创建实体测试数据
    public void CreateEntityTestData(EntityContext entityContext)
    {
        EntityTestDataClass result = this.Create<EntityTestDataClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}Test.Data", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.RenderToFile(GetPath(className,"Tests\\UnitTests\\Models\\" + entity.ClassName.ToPlural()), true);
        }
    }
    
    //创建Dto测试
    public void CreateDtoTest(EntityContext entityContext)
    {
        DtoTestClass result = this.Create<DtoTestClass>();
        this.CopyPropertiesTo(result);
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}DtoTest", entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.RenderToFile(GetPath(className,"Tests\\IntegrationTests\\Dtos"), true);
        }
    }
    
    //创建应用服务测试
    public void CreateServiceTest(EntityContext entityContext)
    {
        ServiceTestClass result = this.Create<ServiceTestClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {   
            string className = string.Format( "{0}ServiceTest",entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.RenderToFile(GetPath(className,"Tests\\IntegrationTests\\Services"), true);
        }
    }
    
    //创建控制器
    public void CreateController(EntityContext entityContext)
    {
        ControllerClass result = this.Create<ControllerClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}Controller",entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.Schema = GetSchema(entity);
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Form\\{0}\\Controllers", GetSchema(entity) )), true);
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Detail\\{0}\\Controllers", GetSchema(entity) )), true);
        }
    }
    
    //创建Index视图
    public void CreateIndexView(EntityContext entityContext)
    {
        IndexViewClass result = this.Create<IndexViewClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = "Index";
            result.Entity = entity;
            result.Namespace = GetSchema(entity).ToLower();
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Form\\{0}\\Views\\{1}", GetSchema(entity),entity.ClassName ), "cshtml" ), true);
        }
    }
    
    //创建查询表单视图
    public void CreateQueryFormView(EntityContext entityContext)
    {
        QueryFormViewClass result = this.Create<QueryFormViewClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = "QueryForm";
            result.Entity = entity;
            result.Namespace = GetSchema(entity).ToLower();
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Form\\{0}\\Views\\{1}\\Parts", GetSchema(entity),entity.ClassName ), "cshtml" ), true);
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Detail\\{0}\\Views\\{1}\\Parts", GetSchema(entity),entity.ClassName ), "cshtml" ), true);
        }
    }
    
    //创建表单视图
    public void CreateFormView(EntityContext entityContext)
    {
        FormViewClass result = this.Create<FormViewClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = "Form";
            result.Entity = entity;
            result.Namespace = GetSchema(entity).ToLower();
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Form\\{0}\\Views\\{1}\\Parts", GetSchema(entity),entity.ClassName ), "cshtml" ), true);
        }
    }
    
    //创建详细视图
    public void CreateDetailView(EntityContext entityContext)
    {
        DetailViewClass result = this.Create<DetailViewClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = "Detail";
            result.Entity = entity;  
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Form\\{0}\\Views\\{1}\\Parts", GetSchema(entity),entity.ClassName ), "cshtml" ), true);
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Detail\\{0}\\Views\\{1}\\Parts", GetSchema(entity),entity.ClassName ), "cshtml" ), true);
        }
    }
    
    //创建控制器 - 表格操作
    public void CreateGridController(EntityContext entityContext)
    {
        GridControllerClass result = this.Create<GridControllerClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = string.Format( "{0}Controller",entity.ClassName );
            result.Entity = entity;
            result.Namespace = GetNamespace(entity);
            result.Schema = GetSchema(entity);
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Grid\\{0}\\Controllers", GetSchema(entity) )), true);
        }
    }
    
    //创建Index视图 - 表格操作
    public void CreateGridIndexView(EntityContext entityContext)
    {
        GridIndexViewClass result = this.Create<GridIndexViewClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = "Index";
            result.Entity = entity;
            result.Namespace = GetSchema(entity).ToLower();
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Grid\\{0}\\Views\\{1}", GetSchema(entity),entity.ClassName ), "cshtml" ), true);
        }
    }
    
    //创建查询表单视图 - 表格操作
    public void CreateGridQueryFormView(EntityContext entityContext)
    {
        QueryFormViewClass result = this.Create<QueryFormViewClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = "QueryForm";
            result.Entity = entity;
            result.Namespace = GetSchema(entity).ToLower();
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Grid\\{0}\\Views\\{1}\\Parts", GetSchema(entity),entity.ClassName ), "cshtml" ), true);
        }
    }
    
    //创建Index视图-行内编辑操作
    public void CreateDetailIndexView(EntityContext entityContext)
    {
        DetailIndexViewClass result = this.Create<DetailIndexViewClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = "Index";
            result.Entity = entity;
            result.Namespace = GetSchema(entity).ToLower();
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Detail\\{0}\\Views\\{1}", GetSchema(entity),entity.ClassName ), "cshtml" ), true);
        }
    }
    
    //创建表单视图-行内编辑操作
    public void CreateDetailFormView(EntityContext entityContext)
    {
        DetailFormViewClass result = this.Create<DetailFormViewClass>();
        this.CopyPropertiesTo(result);
        
        foreach(Entity entity in entityContext.Entities)
        {
            string className = "Form";
            result.Entity = entity;
            result.Namespace = GetSchema(entity).ToLower();
            result.RenderToFile(GetPath(className,string.Format("Presentation\\Detail\\{0}\\Views\\{1}\\Parts", GetSchema(entity),entity.ClassName ), "cshtml" ), true);
        }
    }
    
    private void OnSchemaItemProcessed(object sender, SchemaItemProcessedEventArgs e)
    {
    }

    private void OnSourceDatabaseChanged(object sender, EventArgs e)
    {
    }

    private void OnContextNamespaceChanged(object sender, EventArgs e)
    {
    }
</script>