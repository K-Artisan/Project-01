<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Util.Core</name>
    </assembly>
    <members>
        <member name="T:Util.Extensions">
            <summary>
            类型转换扩展
            </summary>
            <summary>
            日期时间扩展
            </summary>
            <summary>
            枚举扩展
            </summary>
            <summary>
            表达式扩展
            </summary>
            <summary>
            格式化扩展
            </summary>
            <summary>
            工具扩展
            </summary>
            <summary>
            扩展 - 可空类型
            </summary>
            <summary>
            验证扩展
            </summary>
            <summary>
            验证特性扩展
            </summary>
        </member>
        <member name="M:Util.Extensions.ToInt(System.String)">
            <summary>
            转换为int
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToIntOrNull(System.String)">
            <summary>
            转换为可空int
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDouble(System.String)">
            <summary>
            转换为double
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDoubleOrNull(System.String)">
            <summary>
            转换为可空double
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDecimal(System.String)">
            <summary>
            转换为decimal
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDecimalOrNull(System.String)">
            <summary>
            转换为可空decimal
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDate(System.String)">
            <summary>
            转换为日期
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToDateOrNull(System.String)">
            <summary>
            转换为可空日期
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToGuid(System.String)">
            <summary>
            转换为Guid
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToGuidOrNull(System.String)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="obj">数据</param>
        </member>
        <member name="M:Util.Extensions.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">数据,范例: "83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
        </member>
        <member name="M:Util.Extensions.ToGuidList(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">字符串集合</param>
        </member>
        <member name="M:Util.Extensions.ToStr(System.Object)">
            <summary>
            获取字符串
            </summary>
            <param name="obj">对象</param>
        </member>
        <member name="M:Util.Extensions.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Util.Extensions.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Util.Extensions.ToDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToMillisecondString(System.DateTime)">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToMillisecondString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToChineseDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToChineseDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:Util.Extensions.ToChineseDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Util.Extensions.ToChineseDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:Util.Extensions.Description(System.Enum)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="instance">枚举实例</param>
        </member>
        <member name="M:Util.Extensions.Value(System.Enum)">
            <summary>
            获取成员值
            </summary>
            <param name="instance">枚举实例</param>
        </member>
        <member name="M:Util.Extensions.Value``1(System.Enum)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="instance">枚举实例</param>
        </member>
        <member name="M:Util.Extensions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名,支持多级属性名，与句点分隔，范例：Customer.Name</param>
        </member>
        <member name="M:Util.Extensions.Property(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)">
            <summary>
            创建属性表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="member">属性</param>
        </member>
        <member name="M:Util.Extensions.Operation(System.Linq.Expressions.Expression,Util.Operator,System.Object)">
            <summary>
            操作
            </summary>
            <param name="left">左操作数</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.StartsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            头匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.EndsWith(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            尾匹配
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Util.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Util.Extensions.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Object[])">
            <summary>
            创建调用方法表达式
            </summary>
            <param name="instance">调用的实例</param>
            <param name="methodName">方法名</param>
            <param name="paramTypes">参数类型列表</param>
            <param name="values">参数值列表</param>
        </member>
        <member name="M:Util.Extensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Equal(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.NotEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建不等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.Greater(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Greater(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.Less(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Less(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.GreaterEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建大于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.LessEqual(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            创建小于等于运算表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            组合表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="first">左操作数</param>
            <param name="second">右操作数</param>
            <param name="merge">合并操作</param>
        </member>
        <member name="M:Util.Extensions.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            与操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            与操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            或操作表达式
            </summary>
            <param name="left">左操作数</param>
            <param name="right">右操作数</param>
        </member>
        <member name="M:Util.Extensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            或操作表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="first">左操作数</param>
            <param name="second">右操作数</param>
            <returns></returns>
        </member>
        <member name="M:Util.Extensions.Value``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            获取lambda表达式的值
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:Util.Extensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            创建Lambda表达式
            </summary>
            <typeparam name="TDelegate">委托类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数列表</param>
        </member>
        <member name="M:Util.Extensions.Description(System.Boolean)">
            <summary>
            获取描述
            </summary>
            <param name="value">布尔值</param>
        </member>
        <member name="M:Util.Extensions.Description(System.Nullable{System.Boolean})">
            <summary>
            获取描述
            </summary>
            <param name="value">布尔值</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Int32,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Nullable{System.Int32},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Decimal,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Nullable{System.Decimal},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Double,System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.Format(System.Nullable{System.Double},System.String)">
            <summary>
            获取格式化字符串
            </summary>
            <param name="number">数值</param>
            <param name="defaultValue">空值显示的默认文本</param>
        </member>
        <member name="M:Util.Extensions.FormatRmb(System.Decimal)">
            <summary>
            获取格式化字符串,带￥
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.FormatRmb(System.Nullable{System.Decimal})">
            <summary>
            获取格式化字符串,带￥
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.FormatPercent(System.Decimal)">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.FormatPercent(System.Nullable{System.Decimal})">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.FormatPercent(System.Double)">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.FormatPercent(System.Nullable{System.Double})">
            <summary>
            获取格式化字符串,带%
            </summary>
            <param name="number">数值</param>
        </member>
        <member name="M:Util.Extensions.Splice``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            转换为用分隔符拼接的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号 "'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
        </member>
        <member name="M:Util.Extensions.Truncate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截断字符串
            </summary>
            <param name="text">文本</param>
            <param name="length">返回长度</param>
            <param name="endCharCount">添加结束符号的个数，默认0，不添加</param>
            <param name="endChar">结束符号，默认为省略号</param>
        </member>
        <member name="M:Util.Extensions.SafeValue``1(System.Nullable{``0})">
            <summary>
            安全返回值
            </summary>
            <param name="value">可空值</param>
        </member>
        <member name="M:Util.Extensions.CheckNull(System.Object,System.String)">
            <summary>
            检测空值,为null则抛出ArgumentNullException异常
            </summary>
            <param name="obj">对象</param>
            <param name="parameterName">参数名</param>
        </member>
        <member name="M:Util.Extensions.IsEmpty(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.IsEmpty(System.Nullable{System.Guid})">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.IsEmpty(System.Guid)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Extensions.GetErrorMessage(System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            获取验证特性的错误消息
            </summary>
            <param name="attribute">验证特性</param>
        </member>
        <member name="T:Util.Caches.CacheManagerBase">
            <summary>
            基缓存管理器
            </summary>
        </member>
        <member name="T:Util.Caches.ICacheManager">
            <summary>
            缓存管理器
            </summary>
        </member>
        <member name="M:Util.Caches.ICacheManager.Get``1(System.String,System.Func{``0},System.Int32)">
            <summary>
            获取缓存对象，当缓存对象不存在，则执行方法并添加到缓存中
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
            <param name="addHandler">添加缓存方法，当缓存对象不存在时，执行该方法获得缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Util.Caches.ICacheManager.GetByMinutes``1(System.String,System.Func{``0},System.Int32)">
            <summary>
            获取缓存对象，当缓存对象不存在，则执行方法并添加到缓存中
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
            <param name="addHandler">添加缓存方法，当缓存对象不存在时，执行该方法获得缓存对象</param>
            <param name="time">缓存过期时间，单位：分</param>
        </member>
        <member name="M:Util.Caches.ICacheManager.GetByHours``1(System.String,System.Func{``0},System.Int32)">
            <summary>
            获取缓存对象，当缓存对象不存在，则执行方法并添加到缓存中
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
            <param name="addHandler">添加缓存方法，当缓存对象不存在时，执行该方法获得缓存对象</param>
            <param name="time">缓存过期时间，单位：小时</param>
        </member>
        <member name="M:Util.Caches.ICacheManager.Update(System.String,System.Object,System.Int32)">
            <summary>
            更新缓存
            </summary>
            <param name="key">缓存键</param>
            <param name="target">缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Util.Caches.ICacheManager.Remove(System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="F:Util.Caches.CacheManagerBase.CacheSign">
            <summary>
            缓存过期标记
            </summary>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.#ctor(Util.Caches.ICacheConfig)">
            <summary>
            初始化基缓存管理器
            </summary>
            <param name="config">缓存配置</param>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.#ctor(Util.Caches.ICacheProvider,Util.Caches.ICacheKey)">
            <summary>
            初始化基缓存管理器
            </summary>
            <param name="provider">缓存提供程序</param>
            <param name="cacheKey">缓存键</param>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.Get``1(System.String,System.Func{``0},System.Int32)">
            <summary>
            获取缓存对象，当缓存对象不存在，则执行方法并添加到缓存中
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
            <param name="addHandler">添加缓存方法，当缓存对象不存在时，执行该方法获得缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.GetKey(System.String)">
            <summary>
            获取缓存键
            </summary>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.GetSignKey(System.String)">
            <summary>
            获取缓存过期标记
            </summary>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.GetCacheTime(System.Int32)">
            <summary>
            获取缓存时间
            </summary>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.UpdateCache``1(System.Func{``0},System.String,System.Int32,``0)">
            <summary>
            更新缓存
            </summary>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.GetByMinutes``1(System.String,System.Func{``0},System.Int32)">
            <summary>
            获取缓存对象，当缓存对象不存在，则执行方法并添加到缓存中
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
            <param name="addHandler">添加缓存方法，当缓存对象不存在时，执行该方法获得缓存对象</param>
            <param name="time">缓存过期时间，单位：分</param>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.GetByHours``1(System.String,System.Func{``0},System.Int32)">
            <summary>
            获取缓存对象，当缓存对象不存在，则执行方法并添加到缓存中
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
            <param name="addHandler">添加缓存方法，当缓存对象不存在时，执行该方法获得缓存对象</param>
            <param name="time">缓存过期时间，单位：小时</param>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.Update(System.String,System.Object,System.Int32)">
            <summary>
            更新缓存
            </summary>
            <param name="key">缓存键</param>
            <param name="target">缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.Remove(System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.CacheManagerBase.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="P:Util.Caches.CacheManagerBase.CacheProvider">
            <summary>
            缓存提供程序
            </summary>
        </member>
        <member name="P:Util.Caches.CacheManagerBase.CacheKey">
            <summary>
            缓存键
            </summary>
        </member>
        <member name="T:Util.Caches.CacheProviderBase">
            <summary>
            基缓存提供程序
            </summary>
        </member>
        <member name="T:Util.Caches.ICacheProvider">
            <summary>
            缓存提供程序
            </summary>
        </member>
        <member name="M:Util.Caches.ICacheProvider.Add(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存对象,缓存时间单位：秒
            </summary>
            <param name="key">缓存键</param>
            <param name="target">缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Util.Caches.ICacheProvider.Update(System.String,System.Object,System.Int32)">
            <summary>
            更新缓存
            </summary>
            <param name="key">缓存键</param>
            <param name="target">缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Util.Caches.ICacheProvider.Get``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.ICacheProvider.Remove(System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.ICacheProvider.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="M:Util.Caches.CacheProviderBase.Add(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存对象,缓存时间单位：秒
            </summary>
            <param name="key">缓存键</param>
            <param name="target">缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Util.Caches.CacheProviderBase.FilterKey(System.String)">
            <summary>
            过滤键
            </summary>
        </member>
        <member name="M:Util.Caches.CacheProviderBase.AddCache(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存对象
            </summary>
            <param name="key">缓存键</param>
            <param name="target">缓存对象</param>
            <param name="time">缓存过期时间，单位:秒</param>
        </member>
        <member name="M:Util.Caches.CacheProviderBase.Update(System.String,System.Object,System.Int32)">
            <summary>
            更新缓存
            </summary>
            <param name="key">缓存键</param>
            <param name="target">缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Util.Caches.CacheProviderBase.UpdateCache(System.String,System.Object,System.Int32)">
            <summary>
            更新缓存
            </summary>
            <param name="key">缓存键</param>
            <param name="target">缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Util.Caches.CacheProviderBase.Get``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.CacheProviderBase.GetCache``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.CacheProviderBase.Remove(System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.CacheProviderBase.RemoveCache(System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.CacheProviderBase.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="T:Util.Caches.DefaultCacheKey">
            <summary>
            默认缓存键
            </summary>
        </member>
        <member name="T:Util.Caches.ICacheKey">
            <summary>
            缓存键
            </summary>
        </member>
        <member name="M:Util.Caches.ICacheKey.GetKey(System.String)">
            <summary>
            获取加工后的缓存键
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.ICacheKey.GetSignKey(System.String)">
            <summary>
            获取缓存过期标记键
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.DefaultCacheKey.GetKey(System.String)">
            <summary>
            获取缓存键
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.DefaultCacheKey.GetSignKey(System.String)">
            <summary>
            获取缓存过期标记键
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="T:Util.Caches.DefaultCacheManager">
            <summary>
            默认缓存管理器
            </summary>
        </member>
        <member name="M:Util.Caches.DefaultCacheManager.#ctor(Util.Caches.ICacheConfig)">
            <summary>
            初始化基缓存管理器
            </summary>
            <param name="config">缓存配置</param>
        </member>
        <member name="M:Util.Caches.DefaultCacheManager.#ctor(Util.Caches.ICacheProvider,Util.Caches.ICacheKey)">
            <summary>
            初始化基缓存管理器
            </summary>
            <param name="provider">缓存提供程序</param>
            <param name="cacheKey">缓存键</param>
        </member>
        <member name="T:Util.Caches.ICacheConfig">
            <summary>
            缓存配置
            </summary>
        </member>
        <member name="M:Util.Caches.ICacheConfig.GetProvider">
            <summary>
            获取缓存提供程序
            </summary>
        </member>
        <member name="M:Util.Caches.ICacheConfig.GetKey">
            <summary>
            获取缓存键服务
            </summary>
        </member>
        <member name="T:Util.Caches.LocalCacheProvider">
            <summary>
            本地缓存提供程序
            </summary>
        </member>
        <member name="M:Util.Caches.LocalCacheProvider.AddCache(System.String,System.Object,System.Int32)">
            <summary>
            添加缓存对象
            </summary>        
            <param name="key">缓存键</param>
            <param name="target">缓存对象</param>
            <param name="time">缓存过期时间，单位:秒</param>
        </member>
        <member name="M:Util.Caches.LocalCacheProvider.UpdateCache(System.String,System.Object,System.Int32)">
            <summary>
            更新缓存
            </summary>
            <param name="key">缓存键</param>
            <param name="target">缓存对象</param>
            <param name="time">缓存过期时间，单位：秒</param>
        </member>
        <member name="M:Util.Caches.LocalCacheProvider.GetCache``1(System.String)">
            <summary>
            获取缓存对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.LocalCacheProvider.RemoveCache(System.String)">
            <summary>
            移除缓存对象
            </summary>
            <param name="key">缓存键</param>
        </member>
        <member name="M:Util.Caches.LocalCacheProvider.Clear">
            <summary>
            清空所有缓存
            </summary>
        </member>
        <member name="T:Util.Compress.GZip">
            <summary>
            GZip压缩
            </summary>
        </member>
        <member name="M:Util.Compress.GZip.Compress(System.String)">
            <summary>
            压缩
            </summary>
            <param name="text">文本</param>
        </member>
        <member name="M:Util.Compress.GZip.Decompress(System.String)">
            <summary>
            解压缩
            </summary>
            <param name="text">文本</param>
        </member>
        <member name="M:Util.Compress.GZip.Compress(System.Byte[])">
            <summary>
            压缩
            </summary>
            <param name="buffer">字节流</param>
        </member>
        <member name="M:Util.Compress.GZip.Decompress(System.Byte[])">
            <summary>
            解压缩
            </summary>
            <param name="buffer">字节流</param>
        </member>
        <member name="M:Util.Compress.GZip.Compress(System.IO.Stream)">
            <summary>
            压缩
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Util.Compress.GZip.Decompress(System.IO.Stream)">
            <summary>
            解压缩
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="T:Util.Compress.ICompress">
            <summary>
            压缩
            </summary>
        </member>
        <member name="M:Util.Compress.ICompress.Password(System.String)">
            <summary>
            设置密码
            </summary>
            <param name="password">密码</param>
        </member>
        <member name="M:Util.Compress.ICompress.AddDirectory(System.String[])">
            <summary>
            添加源目录,用于压缩或解压缩
            </summary>
            <param name="fromDirectory">源目录绝对路径</param>
        </member>
        <member name="M:Util.Compress.ICompress.AddFile(System.String[])">
            <summary>
            添加源文件,用于压缩或解压缩
            </summary>
            <param name="fromPath">源文件绝对路径</param>
        </member>
        <member name="M:Util.Compress.ICompress.Compress(System.String,System.String)">
            <summary>
            压缩文件
            </summary>
            <param name="toDirectory">压缩到该目录</param>
            <param name="toFileName">压缩文件名，不带扩展名，自动添加.zip扩展名</param>
        </member>
        <member name="M:Util.Compress.ICompress.Decompress(System.String)">
            <summary>
            解压缩文件
            </summary>
            <param name="toDirectory">解压到该目录</param>
        </member>
        <member name="T:Util.Config">
            <summary>
            配置
            </summary>
        </member>
        <member name="M:Util.Config.GetAppSettings(System.String)">
            <summary>
            获取appSettings
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.Config.GetConnectionString(System.String)">
            <summary>
            获取连接字符串
            </summary>
            <param name="key">键名</param>        
        </member>
        <member name="M:Util.Config.GetProviderName(System.String)">
            <summary>
            获取数据提供程序名称
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.Config.GetLogContextKey">
            <summary>
            获取日志上下文键名
            </summary>
        </member>
        <member name="P:Util.Config.DefaultEncoding">
            <summary>
            默认编码,值为utf-8
            </summary>
        </member>
        <member name="T:Util.Const">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:Util.Const.ChinesePinYin">
            <summary>
            汉字及拼音首字母
            </summary>
        </member>
        <member name="F:Util.Const.SimplifiedChinese">
            <summary>
            常用简体汉字
            </summary>
        </member>
        <member name="F:Util.Const.Letters">
            <summary>
            英文字母
            </summary>
        </member>
        <member name="F:Util.Const.Numbers">
            <summary>
            数字
            </summary>
        </member>
        <member name="T:Util.Context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Util.Context.#cctor">
            <summary>
            初始化上下文
            </summary>
        </member>
        <member name="F:Util.Context._context">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Util.Context.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Util.Context.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.Context.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="P:Util.Context.IsWeb">
            <summary>
            是否Web系统
            </summary>
        </member>
        <member name="T:Util.Contexts.IContext">
            <summary>
            上下文
            </summary>
        </member>
        <member name="M:Util.Contexts.IContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Util.Contexts.IContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.Contexts.IContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Util.Contexts.WebContext">
            <summary>
            Web上下文
            </summary>
        </member>
        <member name="M:Util.Contexts.WebContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Util.Contexts.WebContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.Contexts.WebContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Util.Contexts.WindowsContext">
            <summary>
            Windows上下文
            </summary>
        </member>
        <member name="M:Util.Contexts.WindowsContext.Add``1(System.String,``0)">
            <summary>
            添加对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
            <param name="value">对象</param>
        </member>
        <member name="M:Util.Contexts.WindowsContext.Get``1(System.String)">
            <summary>
            获取对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.Contexts.WindowsContext.Remove(System.String)">
            <summary>
            移除对象
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="T:Util.Conv">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:Util.Conv.ToInt(System.Object)">
            <summary>
            转换为整型
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToIntOrNull(System.Object)">
            <summary>
            转换为可空整型
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToDouble(System.Object)">
            <summary>
            转换为双精度浮点数
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToDouble(System.Object,System.Int32)">
            <summary>
            转换为双精度浮点数,并按指定的小数位4舍5入
            </summary>
            <param name="data">数据</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Util.Conv.ToDoubleOrNull(System.Object)">
            <summary>
            转换为可空双精度浮点数
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToDecimal(System.Object)">
            <summary>
            转换为高精度浮点数
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToDecimal(System.Object,System.Int32)">
            <summary>
            转换为高精度浮点数,并按指定的小数位4舍5入
            </summary>
            <param name="data">数据</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Util.Conv.ToDecimalOrNull(System.Object)">
            <summary>
            转换为可空高精度浮点数
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToDecimalOrNull(System.Object,System.Int32)">
            <summary>
            转换为可空高精度浮点数,并按指定的小数位4舍5入
            </summary>
            <param name="data">数据</param>
            <param name="digits">小数位数</param>
        </member>
        <member name="M:Util.Conv.ToGuid(System.Object)">
            <summary>
            转换为Guid
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToGuidOrNull(System.Object)">
            <summary>
            转换为可空Guid
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="list">guid集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
        </member>
        <member name="M:Util.Conv.ToDate(System.Object)">
            <summary>
            转换为日期
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToDateOrNull(System.Object)">
            <summary>
            转换为可空日期
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToBool(System.Object)">
            <summary>
            转换为布尔值
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.GetBool(System.Object)">
            <summary>
            获取布尔值
            </summary>
        </member>
        <member name="M:Util.Conv.ToBoolOrNull(System.Object)">
            <summary>
            转换为可空布尔值
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToString(System.Object)">
            <summary>
            转换为字符串
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.To``1(System.Object)">
            <summary>
            转换为目标元素
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.Conv.ToList``1(System.String)">
            <summary>
            转换为目标元素集合
            </summary>
            <typeparam name="T">目标元素类型</typeparam>
            <param name="list">元素集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
        </member>
        <member name="T:Util.Datas.IUnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="M:Util.Datas.IUnitOfWork.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:Util.Datas.IUnitOfWork.Commit">
            <summary>
            提交更新
            </summary>
        </member>
        <member name="T:Util.Encrypt">
            <summary>
            加密操作
            </summary>
        </member>
        <member name="M:Util.Encrypt.Md5By16(System.String)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="text">待加密字符串</param>
        </member>
        <member name="M:Util.Encrypt.Md5By16(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回16位结果
            </summary>
            <param name="text">待加密字符串</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Encrypt.Md5(System.String,System.Text.Encoding,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Md5加密
            </summary>
        </member>
        <member name="M:Util.Encrypt.Md5By32(System.String)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="text">待加密字符串</param>
        </member>
        <member name="M:Util.Encrypt.Md5By32(System.String,System.Text.Encoding)">
            <summary>
            Md5加密，返回32位结果
            </summary>
            <param name="text">待加密字符串</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="T:Util.Enum">
            <summary>
            枚举操作
            </summary>
        </member>
        <member name="M:Util.Enum.GetInstance``1(System.Object)">
            <summary>
            获取实例
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名或值,
            范例:Enum1枚举有成员A=0,则传入"A"或"0"获取 Enum1.A</param>
        </member>
        <member name="M:Util.Enum.GetName``1(System.Object)">
            <summary>
            获取成员名
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名、值、实例均可,
            范例:Enum1枚举有成员A=0,则传入Enum1.A或0,获取成员名"A"</param>
        </member>
        <member name="M:Util.Enum.GetName(System.Type,System.Object)">
            <summary>
            获取成员名
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Util.Enum.GetValue``1(System.Object)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名、值、实例均可，
            范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
        </member>
        <member name="M:Util.Enum.GetValue(System.Type,System.Object)">
            <summary>
            获取成员值
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Util.Enum.GetDescription``1(System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Util.Enum.GetDescription(System.Type,System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
        </member>
        <member name="M:Util.Enum.GetItems``1">
            <summary>
            获取描述项集合,文本设置为Description，值为Value
            </summary>
            <typeparam name="T">枚举类型</typeparam>
        </member>
        <member name="M:Util.Enum.ValidationIsEnum(System.Type)">
            <summary>
            验证是否枚举类型
            </summary>
        </member>
        <member name="M:Util.Enum.AddItem``1(System.Collections.Generic.ICollection{Util.Item},System.Reflection.FieldInfo,System.Type)">
            <summary>
            添加描述项
            </summary>
        </member>
        <member name="M:Util.Enum.GetValue``1(System.Reflection.FieldInfo,System.Type)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="field">枚举字段</param>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:Util.Enum.GetSortId(System.Reflection.FieldInfo)">
            <summary>
            获取排序号
            </summary>
            <param name="field">枚举字段</param>
        </member>
        <member name="T:Util.Exceptions.ConcurrencyException">
            <summary>
            并发异常
            </summary>
        </member>
        <member name="T:Util.Warning">
            <summary>
            应用程序异常
            </summary>
        </member>
        <member name="M:Util.Warning.#ctor(System.String)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:Util.Warning.#ctor(System.String,System.String)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
        </member>
        <member name="M:Util.Warning.#ctor(System.String,System.String,Util.Logs.LogLevel)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="level">日志级别</param>
        </member>
        <member name="M:Util.Warning.#ctor(System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Warning.#ctor(System.String,System.String,System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Warning.#ctor(System.String,System.String,Util.Logs.LogLevel,System.Exception)">
            <summary>
            初始化应用程序异常
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="level">日志级别</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Warning.GetMessage">
            <summary>
            获取错误消息
            </summary>
        </member>
        <member name="M:Util.Warning.AppendSelfMessage(System.Text.StringBuilder)">
            <summary>
            添加本身消息
            </summary>
        </member>
        <member name="M:Util.Warning.AppendInnerMessage(System.Text.StringBuilder,System.Exception)">
            <summary>
            添加内部异常消息
            </summary>
        </member>
        <member name="M:Util.Warning.GetData(System.Exception)">
            <summary>
            获取添加的额外数据
            </summary>
        </member>
        <member name="F:Util.Warning._message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:Util.Warning.WriteLog(Util.Logs.ILog)">
            <summary>
            写日志
            </summary>
            <param name="log">日志组件</param>
        </member>
        <member name="M:Util.Warning.WriteLog(Util.Logs.ILog,System.Exception)">
            <summary>
            写日志
            </summary>
            <param name="log">日志组件</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:Util.Warning.GetPrompt">
            <summary>
            获取友情提示
            </summary>
        </member>
        <member name="P:Util.Warning.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Util.Warning.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Util.Warning.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Util.Warning.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Util.Warning.StackTrace">
            <summary>
            堆栈跟踪
            </summary>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor">
            <summary>
            初始化并发异常
            </summary>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor(System.Exception)">
            <summary>
            初始化并发异常
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception)">
            <summary>
            初始化并发异常
            </summary>
            <param name="message">错误消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception,System.String)">
            <summary>
            初始化并发异常
            </summary>
            <param name="message">错误消息</param>
            <param name="exception">异常</param>
            <param name="code">错误码</param>
        </member>
        <member name="M:Util.Exceptions.ConcurrencyException.#ctor(System.String,System.Exception,System.String,Util.Logs.LogLevel)">
            <summary>
            初始化并发异常
            </summary>
            <param name="message">错误消息</param>
            <param name="exception">异常</param>
            <param name="code">错误码</param>
            <param name="level">日志级别</param>
        </member>
        <member name="T:Util.Exceptions.ExceptionPrompt">
            <summary>
            异常提示
            </summary>
        </member>
        <member name="M:Util.Exceptions.ExceptionPrompt.#ctor">
            <summary>
            初始化异常提示
            </summary>
        </member>
        <member name="F:Util.Exceptions.ExceptionPrompt._prompts">
            <summary>
            异常提示组件集合
            </summary>
        </member>
        <member name="F:Util.Exceptions.ExceptionPrompt.SingleInstance">
            <summary>
            单实例
            </summary>
        </member>
        <member name="M:Util.Exceptions.ExceptionPrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.ExceptionPrompt.GetSystemExceptionPrompt(System.Exception)">
            <summary>
            获取系统异常提示
            </summary>
        </member>
        <member name="P:Util.Exceptions.ExceptionPrompt.Instance">
            <summary>
            获取异常提示实例
            </summary>
        </member>
        <member name="T:Util.Exceptions.IExceptionPrompt">
            <summary>
            异常提示
            </summary>
        </member>
        <member name="M:Util.Exceptions.IExceptionPrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="T:Util.Exceptions.Prompts.ConcurrencyExceptionPrompt">
            <summary>
            并发异常提示
            </summary>
        </member>
        <member name="M:Util.Exceptions.Prompts.ConcurrencyExceptionPrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="T:Util.Exceptions.Prompts.DataBaseRefrencePrompt">
            <summary>
            数据库外键约束异常提示
            </summary>
        </member>
        <member name="M:Util.Exceptions.Prompts.DataBaseRefrencePrompt.GetPrompt(System.Exception)">
            <summary>
            获取异常提示
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:Util.Exceptions.Prompts.DataBaseRefrencePrompt.IsRefrenceError(System.Exception)">
            <summary>
            是否数据库外键约束错误
            </summary>
        </member>
        <member name="T:Util.Exports.ExcelExport">
            <summary>
            导出Excel
            </summary>
        </member>
        <member name="T:Util.Exports.ExportBase">
            <summary>
            导出
            </summary>
        </member>
        <member name="T:Util.Exports.IExport">
            <summary>
            文件导出
            </summary>
        </member>
        <member name="M:Util.Exports.IExport.DateFormat(System.String)">
            <summary>
            设置日期格式
            </summary>
            <param name="format">日期格式，默认"yyyy-mm-dd"</param>
        </member>
        <member name="M:Util.Exports.IExport.ColumnWidth(System.Int32,System.Int32)">
            <summary>
            列宽
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="width">宽度</param>
        </member>
        <member name="M:Util.Exports.IExport.HeadStyle(Util.Offices.CellStyle)">
            <summary>
            设置表头样式
            </summary>
            <param name="style">单元格样式</param>
        </member>
        <member name="M:Util.Exports.IExport.BodyStyle(Util.Offices.CellStyle)">
            <summary>
            设置正文样式
            </summary>
            <param name="style">单元格样式</param>
        </member>
        <member name="M:Util.Exports.IExport.FootStyle(Util.Offices.CellStyle)">
            <summary>
            设置页脚样式
            </summary>
            <param name="style">单元格样式</param>
        </member>
        <member name="M:Util.Exports.IExport.Head(System.String[])">
            <summary>
            添加表头
            </summary>
            <param name="titles">列标题</param>
        </member>
        <member name="M:Util.Exports.IExport.Head(Util.Offices.Cell[])">
            <summary>
            添加表头
            </summary>
            <param name="cells">单元格集合</param>
        </member>
        <member name="M:Util.Exports.IExport.Body``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加正文
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体集合</param>
        </member>
        <member name="M:Util.Exports.IExport.Body``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            添加正文
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体集合</param>
            <param name="propertiesExpression">属性列表表达式，范例：t => new object[]{t.A,t.B}</param>
        </member>
        <member name="M:Util.Exports.IExport.Body``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <summary>
            添加正文
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体集合</param>
            <param name="propertyNames">属性列表,范例："A","B"</param>
        </member>
        <member name="M:Util.Exports.IExport.Foot(System.String[])">
            <summary>
            添加页脚
            </summary>
            <param name="values">值</param>
        </member>
        <member name="M:Util.Exports.IExport.Foot(Util.Offices.Cell[])">
            <summary>
            添加页脚
            </summary>
            <param name="cells">单元格集合</param>
        </member>
        <member name="M:Util.Exports.IExport.Write(System.String,System.String)">
            <summary>
            写入文件
            </summary>
            <param name="directory">目录，不包括文件名</param>
            <param name="fileName">文件名，不包括扩展名</param>
        </member>
        <member name="M:Util.Exports.IExport.Download(System.String)">
            <summary>
            下载
            </summary>
            <param name="fileName">文件名，不包括扩展名</param>
        </member>
        <member name="M:Util.Exports.IExport.Download(System.String,System.Text.Encoding)">
            <summary>
            下载
            </summary>
            <param name="fileName">文件名，不包括扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Exports.ExportBase.#ctor(Util.Exports.ExportFormat)">
            <summary>
            初始化导出
            </summary>
            <param name="format">导出格式</param>
        </member>
        <member name="F:Util.Exports.ExportBase.Table">
            <summary>
            表
            </summary>
        </member>
        <member name="F:Util.Exports.ExportBase._format">
            <summary>
            导出格式
            </summary>
        </member>
        <member name="F:Util.Exports.ExportBase._headStyle">
            <summary>
            表头样式
            </summary>
        </member>
        <member name="F:Util.Exports.ExportBase._bodyStyle">
            <summary>
            正文样式
            </summary>
        </member>
        <member name="F:Util.Exports.ExportBase._footStyle">
            <summary>
            页脚样式
            </summary>
        </member>
        <member name="M:Util.Exports.ExportBase.ColumnWidth(System.Int32,System.Int32)">
            <summary>
            列宽
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="width">宽度</param>
        </member>
        <member name="M:Util.Exports.ExportBase.DateFormat(System.String)">
            <summary>
            设置日期格式
            </summary>
            <param name="format">日期格式，默认"yyyy-mm-dd"</param>
        </member>
        <member name="M:Util.Exports.ExportBase.HeadStyle(Util.Offices.CellStyle)">
            <summary>
            设置表头样式
            </summary>
            <param name="style">表头单元格样式</param>
        </member>
        <member name="M:Util.Exports.ExportBase.GetHeadStyle">
            <summary>
            获取表头样式
            </summary>
        </member>
        <member name="M:Util.Exports.ExportBase.BodyStyle(Util.Offices.CellStyle)">
            <summary>
            设置正文样式
            </summary>
            <param name="style">单元格样式</param>
        </member>
        <member name="M:Util.Exports.ExportBase.GetBodyStyle">
            <summary>
            获取正文样式
            </summary>
        </member>
        <member name="M:Util.Exports.ExportBase.FootStyle(Util.Offices.CellStyle)">
            <summary>
            设置页脚样式
            </summary>
            <param name="style">单元格样式</param>
        </member>
        <member name="M:Util.Exports.ExportBase.GetFootStyle">
            <summary>
            获取页脚样式
            </summary>
        </member>
        <member name="M:Util.Exports.ExportBase.Head(System.String[])">
            <summary>
            添加表头
            </summary>
            <param name="titles">列标题</param>
        </member>
        <member name="M:Util.Exports.ExportBase.Head(Util.Offices.Cell[])">
            <summary>
            添加表头
            </summary>
            <param name="cells">表头</param>
        </member>
        <member name="M:Util.Exports.ExportBase.Body``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            添加正文
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体集合</param>
        </member>
        <member name="M:Util.Exports.ExportBase.Body``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            添加正文
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体集合</param>
            <param name="propertiesExpression">属性表达式</param>
        </member>
        <member name="M:Util.Exports.ExportBase.Body``1(System.Collections.Generic.IEnumerable{``0},System.String[])">
            <summary>
            添加正文
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体集合</param>
            <param name="propertyNames">属性列表</param>
        </member>
        <member name="M:Util.Exports.ExportBase.AddEntity``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加实体
            </summary>
        </member>
        <member name="M:Util.Exports.ExportBase.GetPropertyValues``1(``0,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            获取属性值集合
            </summary>
        </member>
        <member name="M:Util.Exports.ExportBase.AdjustColumnWidth``1(``0,System.String[])">
            <summary>
            调整列宽
            </summary>
        </member>
        <member name="M:Util.Exports.ExportBase.AdjustColumnWidth(System.Reflection.PropertyInfo,System.Int32)">
            <summary>
            调整列宽
            </summary>
        </member>
        <member name="M:Util.Exports.ExportBase.Foot(System.String[])">
            <summary>
            添加页脚
            </summary>
            <param name="values">值</param>
        </member>
        <member name="M:Util.Exports.ExportBase.Foot(Util.Offices.Cell[])">
            <summary>
            添加页脚
            </summary>
            <param name="cells">单元格集合</param>
        </member>
        <member name="M:Util.Exports.ExportBase.Write(System.String,System.String)">
            <summary>
            写入文件
            </summary>
            <param name="directory">目录，不包括文件名</param>
            <param name="fileName">文件名，不包括扩展名</param>
        </member>
        <member name="M:Util.Exports.ExportBase.GetFilePath(System.String,System.String)">
            <summary>
            获取文件路径
            </summary>
        </member>
        <member name="M:Util.Exports.ExportBase.GetFileName(System.String)">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="M:Util.Exports.ExportBase.WriteStream(System.IO.Stream)">
            <summary>
            写入流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Util.Exports.ExportBase.Download(System.String)">
            <summary>
            下载
            </summary>
            <param name="fileName">文件名，不包括扩展名</param>
        </member>
        <member name="M:Util.Exports.ExportBase.Download(System.String,System.Text.Encoding)">
            <summary>
            下载
            </summary>
            <param name="fileName">文件名，不包括扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Exports.ExcelExport.#ctor(Util.Exports.ExportFormat,Util.Offices.IExcel)">
            <summary>
            初始化Excel导出
            </summary>
            <param name="format">导出格式</param>
            <param name="excel">Excel操作</param>
        </member>
        <member name="F:Util.Exports.ExcelExport._excel">
            <summary>
            Excel操作
            </summary>
        </member>
        <member name="M:Util.Exports.ExcelExport.ColumnWidth(System.Int32,System.Int32)">
            <summary>
            列宽
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="width">宽度</param>
        </member>
        <member name="M:Util.Exports.ExcelExport.DateFormat(System.String)">
            <summary>
            设置日期格式
            </summary>
            <param name="format">日期格式，默认"yyyy-mm-dd"</param>
        </member>
        <member name="M:Util.Exports.ExcelExport.WriteStream(System.IO.Stream)">
            <summary>
            写入流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Util.Exports.ExcelExport.AddHeader">
            <summary>
            添加表头
            </summary>
        </member>
        <member name="M:Util.Exports.ExcelExport.CreateRows(System.Collections.Generic.IEnumerable{Util.Offices.Row})">
            <summary>
            创建行
            </summary>
        </member>
        <member name="M:Util.Exports.ExcelExport.AddBody">
            <summary>
            添加正文
            </summary>
        </member>
        <member name="M:Util.Exports.ExcelExport.AddFoot">
            <summary>
            添加页脚
            </summary>
        </member>
        <member name="T:Util.Exports.ExportFormat">
            <summary>
            导出格式
            </summary>
        </member>
        <member name="F:Util.Exports.ExportFormat.Xls">
            <summary>
            Excel 2003
            </summary>
        </member>
        <member name="F:Util.Exports.ExportFormat.Xlsx">
            <summary>
            Excel 2007
            </summary>
        </member>
        <member name="T:Util.Exports.IExportFactory">
            <summary>
            文件导出操作工厂
            </summary>
        </member>
        <member name="M:Util.Exports.IExportFactory.Create(Util.Exports.ExportFormat)">
            <summary>
            创建文件导出操作
            </summary>
            <param name="format">导出格式</param>
        </member>
        <member name="T:Util.File">
            <summary>
            文件及流操作
            </summary>
            <summary>
            文件及流操作 - 文件信息
            </summary>
            <summary>
            文件及流操作 - 文件路径操作
            </summary>
            <summary>
            文件及流操作 - 流类型转换
            </summary>
            <summary>
            文件及流操作 - 流操作
            </summary>
        </member>
        <member name="M:Util.File.Read(System.String)">
            <summary>
            读取文件到字符串
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Util.File.Read(System.String,System.Text.Encoding)">
            <summary>
            读取文件到字符串
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.File.ReadToBytes(System.String)">
            <summary>
            将文件读取到字节流中
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Util.File.Write(System.String,System.String)">
            <summary>
            将字符串写入文件,文件不存在则创建
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">数据</param>
        </member>
        <member name="M:Util.File.Write(System.String,System.Byte[])">
            <summary>
            将字节流写入文件,文件不存在则创建
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="bytes">数据</param>
        </member>
        <member name="M:Util.File.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除文件
            </summary>
            <param name="filePaths">文件集合的绝对路径</param>
        </member>
        <member name="M:Util.File.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:Util.File.GetAllFiles(System.String)">
            <summary>
            获取目录中全部文件列表，包括子目录
            </summary>
            <param name="directoryPath">目录绝对路径</param>
        </member>
        <member name="M:Util.File.Save(System.Collections.Generic.IEnumerable{Util.Files.FileInfo})">
            <summary>
            保存文件
            </summary>
            <param name="files">文件信息集合</param>
        </member>
        <member name="M:Util.File.Save(Util.Files.FileInfo)">
            <summary>
            保存文件
            </summary>
            <param name="file">文件信息</param>
        </member>
        <member name="M:Util.File.ValidateSave(Util.Files.FileInfo)">
            <summary>
            验证保存文件
            </summary>
        </member>
        <member name="M:Util.File.CreateDirectory(Util.Files.FileInfo)">
            <summary>
            创建目录
            </summary>
        </member>
        <member name="M:Util.File.SaveFile(Util.Files.FileInfo)">
            <summary>
            保存文件
            </summary>
        </member>
        <member name="M:Util.File.JoinPath(System.String,System.String)">
            <summary>
            连接基路径和子路径,比如把 c: 与 test.doc 连接成 c:\test.doc
            </summary>
            <param name="basePath">基路径,范例：c:</param>
            <param name="subPath">子路径,可以是文件名, 范例：test.doc</param>
        </member>
        <member name="M:Util.File.StreamToString(System.IO.Stream)">
            <summary>
            流转换成字符串
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.File.StreamToString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            流转换成字符串
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.File.StringToStream(System.String)">
            <summary>
            字符串转换成流
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.File.StringToStream(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成流
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.File.StringToBytes(System.String)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="data">数据,默认字符编码utf-8</param>        
        </member>
        <member name="M:Util.File.StringToBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.File.BytesToString(System.Byte[])">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data">数据,默认字符编码utf-8</param>        
        </member>
        <member name="M:Util.File.BytesToString(System.Byte[],System.Text.Encoding)">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.File.BytesToInt(System.Byte[])">
            <summary>
            字节数组转换成整数
            </summary>
            <param name="data">数据</param>
        </member>
        <member name="M:Util.File.StreamToBytes(System.IO.Stream)">
            <summary>
            流转换为字节流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Util.File.AddLength(System.Byte[])">
            <summary>
            为字节流添加长度，长度从第1个字节到第4个字节
            </summary>
            <param name="buffer">字节流</param>
        </member>
        <member name="T:Util.Files.DefaultUploadPathStrategy">
            <summary>
            默认上传路径策略
            </summary>
        </member>
        <member name="T:Util.Files.IUploadPathStrategy">
            <summary>
            上传路径策略
            </summary>
        </member>
        <member name="M:Util.Files.IUploadPathStrategy.GetPath(System.String,System.String,System.String)">
            <summary>
            获取上传路径
            </summary>
            <param name="fileName">文件名，包含扩展名</param>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.DefaultUploadPathStrategy.GetPath(System.String,System.String,System.String)">
            <summary>
            获取上传路径,形式：\文件分类目录\文件名-HHmmss.扩展名
            </summary>
            <param name="fileName">文件名，包含扩展名</param>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基目录</param>
        </member>
        <member name="T:Util.Files.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="M:Util.Files.FileInfo.#ctor(System.String,System.Byte[],System.Nullable{System.Int64},System.String)">
            <summary>
            初始化文件信息
            </summary>
        </member>
        <member name="M:Util.Files.FileInfo.GetFileName(System.String,System.String)">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="M:Util.Files.FileInfo.Create(System.String,System.Nullable{System.Int64},System.String)">
            <summary>
            创建文件信息
            </summary>
            <param name="filePath">文件相对路径</param>
            <param name="fileSize">文件大小</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Util.Files.FileInfo.Create(System.String,System.Byte[],System.String)">
            <summary>
            创建文件信息
            </summary>
            <param name="filePath">文件相对路径</param>
            <param name="fileBytes">文件字节流</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetPhysicalPath">
            <summary>
            获取文件的绝对路径,范例：c:/a.jpg
            </summary>
        </member>
        <member name="M:Util.Files.FileInfo.Join(System.String,System.String)">
            <summary>
            合并路径
            </summary>
            <param name="filePath">文件路径</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetFileName(System.String)">
            <summary>
            从文件路径中获取文件名(包含扩展名)
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetFileNameWithoutExtension(System.String)">
            <summary>
            从文件路径中获取文件名(不包含扩展名)
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetExtension(System.String)">
            <summary>
            从文件路径中获取扩展名
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetDirectoryName(System.String)">
            <summary>
            从文件路径中获取目录
            </summary>
            <param name="filePath">文件路径</param>
        </member>
        <member name="M:Util.Files.FileInfo.GetSafeName(System.String)">
            <summary>
            获取更安全的文件名，过滤无效字符，将汉字转成拼音简码，且对文件名添加时分秒，更不易重复，范例：@中国*.jpg，结果为zg-112233.jpg
            </summary>
            <param name="fileName">文件名，包含扩展名，范例：c.jpg</param>
        </member>
        <member name="M:Util.Files.FileInfo.ValidateFileName(System.String)">
            <summary>
            验证文件名
            </summary>
        </member>
        <member name="M:Util.Files.FileInfo.FilterFileName(System.String)">
            <summary>
            过滤文件名
            </summary>
        </member>
        <member name="P:Util.Files.FileInfo.FilePath">
            <summary>
            文件相对路径
            </summary>
        </member>
        <member name="P:Util.Files.FileInfo.FileName">
            <summary>
            文件名，不包括扩展名
            </summary>
        </member>
        <member name="P:Util.Files.FileInfo.Extension">
            <summary>
            扩展名
            </summary>
        </member>
        <member name="P:Util.Files.FileInfo.FileBytes">
            <summary>
            文件字节流
            </summary>
        </member>
        <member name="P:Util.Files.FileInfo.Length">
            <summary>
            文件长度,单位：字节
            </summary>
        </member>
        <member name="T:Util.Files.FileManager">
            <summary>
            文件管理器
            </summary>
        </member>
        <member name="T:Util.Files.IFileManager">
            <summary>
            文件管理器
            </summary>
        </member>
        <member name="T:Util.IDependency">
            <summary>
            依赖服务，用于Ioc自动装配
            </summary>
        </member>
        <member name="M:Util.Files.IFileManager.Append(System.String)">
            <summary>
            添加内容到文件末尾
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Util.Files.IFileManager.Remove(System.String)">
            <summary>
            移除内容
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Util.Files.IFileManager.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除内容
            </summary>
            <param name="list">内容列表</param>
        </member>
        <member name="M:Util.Files.IFileManager.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Util.Files.IFileManager.DeleteFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除文件列表
            </summary>
            <param name="paths">文件路径列表</param>
        </member>
        <member name="P:Util.Files.IFileManager.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="F:Util.Files.FileManager._result">
            <summary>
            结果
            </summary>
        </member>
        <member name="M:Util.Files.FileManager.Append(System.String)">
            <summary>
            添加内容到文件末尾
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Util.Files.FileManager.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:Util.Files.FileManager.Remove(System.String)">
            <summary>
            移除内容
            </summary>
            <param name="content">内容</param>
        </member>
        <member name="M:Util.Files.FileManager.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            移除内容
            </summary>
            <param name="list">内容列表</param>
        </member>
        <member name="M:Util.Files.FileManager.Save">
            <summary>
            保存
            </summary>
        </member>
        <member name="M:Util.Files.FileManager.DeleteFiles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除文件列表
            </summary>
            <param name="paths">文件路径列表</param>
        </member>
        <member name="P:Util.Files.FileManager.FilePath">
            <summary>
            文件绝对路径
            </summary>
        </member>
        <member name="T:Util.Files.FileSize">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.#ctor(System.Int64,Util.Files.FileUnit)">
            <summary>
            初始化文件大小
            </summary>
            <param name="size">文件字节大小</param>
            <param name="unit">文件字节大小</param>
        </member>
        <member name="M:Util.Files.FileSize.GetSize(System.Int64,Util.Files.FileUnit)">
            <summary>
            获取文件大小
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.GetSizeByG">
            <summary>
            获取文件大小，单位：G
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.GetSizeByM">
            <summary>
            获取文件大小，单位：M
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.GetSizeByK">
            <summary>
            获取文件大小，单位：K
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.GetSize">
            <summary>
            获取文件大小，单位：字节
            </summary>
        </member>
        <member name="M:Util.Files.FileSize.ToString">
            <summary>
            输出描述
            </summary>
        </member>
        <member name="P:Util.Files.FileSize.Size">
            <summary>
            文件字节长度
            </summary>
        </member>
        <member name="T:Util.Files.FileUnit">
            <summary>
            文件容量单位
            </summary>
        </member>
        <member name="F:Util.Files.FileUnit.Byte">
            <summary>
            字节
            </summary>
        </member>
        <member name="F:Util.Files.FileUnit.K">
            <summary>
            K字节
            </summary>
        </member>
        <member name="F:Util.Files.FileUnit.M">
            <summary>
            M字节
            </summary>
        </member>
        <member name="F:Util.Files.FileUnit.G">
            <summary>
            G字节
            </summary>
        </member>
        <member name="T:Util.Files.FileUnitExtensions">
            <summary>
            文件容量单位枚举扩展
            </summary>
        </member>
        <member name="M:Util.Files.FileUnitExtensions.Description(System.Nullable{Util.Files.FileUnit})">
            <summary>
            获取描述
            </summary>
        </member>
        <member name="M:Util.Files.FileUnitExtensions.Value(System.Nullable{Util.Files.FileUnit})">
            <summary>
            获取值
            </summary>
        </member>
        <member name="T:Util.Files.FileUpload">
            <summary>
            文件上传操作
            </summary>
        </member>
        <member name="T:Util.Files.IFileUpload">
            <summary>
            文件上传操作
            </summary>
        </member>
        <member name="M:Util.Files.IFileUpload.GetFile(System.String,System.String)">
            <summary>
            获取上传文件
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.GetImage(System.String,System.String)">
            <summary>
            获取上传图片
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.GetFiles(System.String,System.String)">
            <summary>
            获取上传文件集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.GetImages(System.String,System.String)">
            <summary>
            获取上传图片集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.UploadFile(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.UploadImage(System.String,System.String)">
            <summary>
            上传图片
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.UploadFiles(System.String,System.String)">
            <summary>
            上传文件集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.IFileUpload.UploadImages(System.String,System.String)">
            <summary>
            上传图片集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="P:Util.Files.IFileUpload.UploadPathStrategy">
            <summary>
            上传路径策略
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.#ctor(Util.Files.IUploadPathStrategy)">
            <summary>
            初始化文件上传操作
            </summary>
            <param name="uploadPathStrategy">上传路径策略</param>
        </member>
        <member name="M:Util.Files.FileUpload.GetFile(System.String,System.String)">
            <summary>
            获取上传文件
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.ToFileInfo(System.Web.HttpPostedFile,System.String,System.String)">
            <summary>
            转换为文件信息
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetFilePath(System.Web.HttpPostedFile,System.String,System.String)">
            <summary>
            获取文件路径
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetFileName(System.Web.HttpPostedFile)">
            <summary>
            获取文件名
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetImage(System.String,System.String)">
            <summary>
            获取上传图片
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.ToImageInfo(System.Web.HttpPostedFile,System.String,System.String)">
            <summary>
            转换为图片信息
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetSize(System.IO.Stream)">
            <summary>
            获取图片尺寸
            </summary>
        </member>
        <member name="M:Util.Files.FileUpload.GetFiles(System.String,System.String)">
            <summary>
            获取上传文件集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.GetImages(System.String,System.String)">
            <summary>
            获取上传图片集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.UploadFile(System.String,System.String)">
            <summary>
            上传文件
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.UploadImage(System.String,System.String)">
            <summary>
            上传图片
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.UploadFiles(System.String,System.String)">
            <summary>
            上传文件集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="M:Util.Files.FileUpload.UploadImages(System.String,System.String)">
            <summary>
            上传图片集合
            </summary>
            <param name="fileCategory">文件分类目录</param>
            <param name="baseCategory">基分类目录</param>
        </member>
        <member name="P:Util.Files.FileUpload.UploadPathStrategy">
            <summary>
            上传路径策略
            </summary>
        </member>
        <member name="T:Util.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Format.RemoveEnd0(System.Decimal)">
            <summary>
            移除尾随0
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:Util.Image">
            <summary>
            图片操作
            </summary>
        </member>
        <member name="M:Util.Image.FromFile(System.String)">
            <summary>
            图片文件的绝对路径
            </summary>
            <param name="filePath">图片文件的绝对路径</param>
        </member>
        <member name="M:Util.Image.FromStream(System.IO.Stream)">
            <summary>
            图片文件的绝对路径
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Util.Image.FromStream(System.Byte[])">
            <summary>
            图片文件的绝对路径
            </summary>
            <param name="buffer">字节流</param>
        </member>
        <member name="T:Util.Images.ImageInfo">
            <summary>
            图片信息
            </summary>
        </member>
        <member name="M:Util.Images.ImageInfo.#ctor(System.String,System.Byte[],System.Nullable{System.Int64},System.Int32,System.Int32,System.String)">
            <summary>
            初始化图片信息
            </summary>
        </member>
        <member name="M:Util.Images.ImageInfo.Create(System.String,System.Nullable{System.Int64},System.Int32,System.Int32,System.String)">
            <summary>
            初始化图片信息
            </summary>
            <param name="filePath">文件相对路径</param>
            <param name="fileSize">文件大小</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:Util.Images.ImageInfo.Create(System.String,System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            初始化图片信息
            </summary>
            <param name="filePath">文件相对路径</param>
            <param name="fileBytes">文件字节流</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="P:Util.Images.ImageInfo.Size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="T:Util.INullObject">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Util.INullObject.IsNull">
            <summary>
            是否空对象
            </summary>
        </member>
        <member name="T:Util.Item">
            <summary>
            列表项
            </summary>
        </member>
        <member name="M:Util.Item.#ctor">
            <summary>
            初始化列表项
            </summary>
        </member>
        <member name="M:Util.Item.#ctor(System.String,System.String)">
            <summary>
            初始化列表项
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Item.#ctor(System.String,System.String,System.Int32)">
            <summary>
            初始化
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
            <param name="sortId">排序号</param>
        </member>
        <member name="M:Util.Item.CompareTo(Util.Item)">
            <summary>
            比较
            </summary>
            <param name="other">其它列表项</param>
        </member>
        <member name="P:Util.Item.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:Util.Item.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Util.Item.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:Util.Lambda">
            <summary>
            Lambda表达式操作
            </summary>
        </member>
        <member name="M:Util.Lambda.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            获取成员
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Util.Lambda.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            获取成员表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="M:Util.Lambda.GetName(System.Linq.Expressions.Expression)">
            <summary>
            获取成员名称，范例：t => t.Name,返回 Name
            </summary>
            <param name="expression">表达式,范例：t => t.Name</param>
        </member>
        <member name="M:Util.Lambda.GetMemberName(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取成员名称
            </summary>
        </member>
        <member name="M:Util.Lambda.GetNames``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object[]}})">
            <summary>
            获取名称列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="expression">属性集合表达式,范例：t => new object[]{t.A,t.B}</param>
        </member>
        <member name="M:Util.Lambda.AddName(System.Collections.Generic.List{System.String},System.Linq.Expressions.Expression)">
            <summary>
            添加名称
            </summary>
        </member>
        <member name="M:Util.Lambda.GetValue(System.Linq.Expressions.Expression)">
            <summary>
            获取值,范例：t => t.Name == "A",返回 A
            </summary>
            <param name="expression">表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:Util.Lambda.GetMemberValue(System.Linq.Expressions.MemberExpression)">
            <summary>
            获取属性表达式的值
            </summary>
        </member>
        <member name="M:Util.Lambda.GetConstantExpressionValue(System.Linq.Expressions.Expression)">
            <summary>
            获取常量表达式的值
            </summary>
        </member>
        <member name="M:Util.Lambda.GetParameter(System.Linq.Expressions.Expression)">
            <summary>
            获取参数，范例：t.Name,返回 t
            </summary>
            <param name="expression">表达式，范例：t.Name</param>
        </member>
        <member name="M:Util.Lambda.GetAttribute``1(System.Linq.Expressions.Expression)">
            <summary>
            获取特性
            </summary>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="expression">属性表达式</param>
        </member>
        <member name="M:Util.Lambda.GetAttribute``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Util.Lambda.GetAttribute``2(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            获取特性
            </summary>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Util.Lambda.GetAttributes``3(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            获取特性列表
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TProperty">属性类型</typeparam>
            <typeparam name="TAttribute">特性类型</typeparam>
            <param name="propertyExpression">属性表达式</param>
        </member>
        <member name="M:Util.Lambda.Constant(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            获取常量表达式，自动转换值的类型
            </summary>
            <param name="expression">表达式</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambda.GetCriteriaCount(System.Linq.Expressions.LambdaExpression)">
            <summary>
            获取谓词条件的个数
            </summary>
            <param name="expression">谓词表达式,范例：t => t.Name == "A"</param>
        </member>
        <member name="M:Util.Lambda.Equal``1(System.String,System.Object)">
            <summary>
            创建等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambda.CreateParameter``1">
            <summary>
            创建参数
            </summary>
        </member>
        <member name="M:Util.Lambda.NotEqual``1(System.String,System.Object)">
            <summary>
            创建不等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambda.Greater``1(System.String,System.Object)">
            <summary>
            创建大于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambda.Less``1(System.String,System.Object)">
            <summary>
            创建小于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambda.GreaterEqual``1(System.String,System.Object)">
            <summary>
            创建大于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambda.LessEqual``1(System.String,System.Object)">
            <summary>
            创建小于等于运算lambda表达式
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambda.Contains``1(System.String,System.Object)">
            <summary>
            调用Contains方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambda.Call``1(System.String,System.String,System.Object)">
            <summary>
            调用方法
            </summary>
        </member>
        <member name="M:Util.Lambda.Starts``1(System.String,System.String)">
            <summary>
            调用StartsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambda.Ends``1(System.String,System.String)">
            <summary>
            调用EndsWith方法
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambda.ParsePredicate``1(System.String,System.Object,Util.Operator)">
            <summary>
            解析为谓词表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="propertyName">属性名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Util.Lambda.ParsePredicate``1(System.String,System.Object[])">
            <summary>
            解析为谓词表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="predicateExpression">谓词表达式字符串,参数占位符为@0,@1,@2 ...</param>
            <param name="values">值</param>
        </member>
        <member name="T:Util.Lambdas.ExpressionBuilder`1">
            <summary>
            表达式生成器
            </summary>
        </member>
        <member name="M:Util.Lambdas.ExpressionBuilder`1.#ctor">
            <summary>
            初始化表达式生成器
            </summary>
        </member>
        <member name="M:Util.Lambdas.ExpressionBuilder`1.GetParameter">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:Util.Lambdas.ExpressionBuilder`1.Create``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},Util.Operator,System.Object)">
            <summary>
            创建表达式
            </summary>
            <param name="property">属性表达式</param>
            <param name="operator">运算符</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Lambdas.ExpressionBuilder`1.ToLambda(System.Linq.Expressions.Expression)">
            <summary>
            转换为Lambda表达式
            </summary>
            <param name="expression">表达式</param>
        </member>
        <member name="P:Util.Lambdas.ExpressionBuilder`1.Parameter">
            <summary>
            参数
            </summary>
        </member>
        <member name="T:Util.Lambdas.ParameterRebinder">
            <summary>
            参数重绑定操作
            </summary>
        </member>
        <member name="F:Util.Lambdas.ParameterRebinder._map">
            <summary>
            参数字典
            </summary>
        </member>
        <member name="M:Util.Lambdas.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            初始化参数重绑定操作
            </summary>
            <param name="map">参数字典</param>
        </member>
        <member name="M:Util.Lambdas.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">参数字典</param>
            <param name="exp">表达式</param>
        </member>
        <member name="M:Util.Lambdas.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="parameterExpression">参数</param>
        </member>
        <member name="T:Util.Logs.Formats.BusinessFormatter">
            <summary>
            业务格式器
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.FormatterBase">
            <summary>
            日志消息基格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.FormatterBase.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化日志消息格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.FormatterBase.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.FormatterBase.Add(System.String,System.String)">
            <summary>
            添加消息
            </summary>
        </member>
        <member name="P:Util.Logs.Formats.FormatterBase.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="P:Util.Logs.Formats.FormatterBase.Result">
            <summary>
            输出结果
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.BusinessFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化业务格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.BusinessFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.CaptionFormatter">
            <summary>
            标题格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.CaptionFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化标题格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.CaptionFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.ClassFormatter">
            <summary>
            类格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ClassFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化类格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.ClassFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ClassFormatter.AddParams">
            <summary>
            添加参数
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.ContentFormatter">
            <summary>
            内容格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ContentFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化内容格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.ContentFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.ErrorFormatter">
            <summary>
            错误格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ErrorFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化错误格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.ErrorFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ErrorFormatter.AddErrorCode">
            <summary>
            添加错误码
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.ErrorFormatter.AddError">
            <summary>
            添加错误消息
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.IpFormatter">
            <summary>
            Ip格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.IpFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化Ip格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.IpFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.LogMessageFormatter">
            <summary>
            日志消息格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.LogMessageFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化日志消息格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.LogMessageFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.LogMessageFormatter.Add(Util.Logs.Formats.FormatterBase)">
            <summary>
            添加消息
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.LogMessageFormatter.Finish">
            <summary>
            结束
            </summary>
        </member>
        <member name="P:Util.Logs.Formats.LogMessageFormatter.Line">
            <summary>
            行号
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.SqlFormatter">
            <summary>
            Sql格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.SqlFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化Sql格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.SqlFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.SqlParamsFormatter">
            <summary>
            Sql参数格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.SqlParamsFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化Sql参数格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.SqlParamsFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.StackTraceFormatter">
            <summary>
            堆栈跟踪格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.StackTraceFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化堆栈跟踪格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.StackTraceFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.TitleFormatter">
            <summary>
            标题格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化标题格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.AddLevel">
            <summary>
            添加日志级别
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.AddTraceId">
            <summary>
            添加跟踪号
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.AddTime">
            <summary>
            添加操作时间
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.TitleFormatter.AddTotalSeconds">
            <summary>
            添加已执行时间
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.UrlFormatter">
            <summary>
            Url格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.UrlFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化Url格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.UrlFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.UrlFormatter.AddUrl">
            <summary>
            添加Url
            </summary>
        </member>
        <member name="T:Util.Logs.Formats.UserFormatter">
            <summary>
            用户格式器
            </summary>
        </member>
        <member name="M:Util.Logs.Formats.UserFormatter.#ctor(Util.Logs.LogMessage)">
            <summary>
            初始化用户格式器
            </summary>
            <param name="message">日志消息</param>
        </member>
        <member name="M:Util.Logs.Formats.UserFormatter.Format">
            <summary>
            格式化
            </summary>
        </member>
        <member name="T:Util.Logs.ILog">
            <summary>
            日志操作
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Info">
            <summary>
            信息
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Warn">
            <summary>
            警告
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="M:Util.Logs.ILog.Start">
            <summary>
            启动计时器
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.BusinessId">
            <summary>
            业务编号
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.Application">
            <summary>
            应用程序名称
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.Tenant">
            <summary>
            租户名称
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.Category">
            <summary>
            分类
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.Class">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.Method">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.Sql">
            <summary>
            Sql语句
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.SqlParams">
            <summary>
            Sql参数
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Util.Logs.ILog.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:Util.Logs.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:Util.Logs.LogLevel.Fatal">
            <summary>
            致命错误
            </summary>
        </member>
        <member name="F:Util.Logs.LogLevel.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:Util.Logs.LogLevel.Warning">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:Util.Logs.LogLevel.Information">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:Util.Logs.LogLevel.Debug">
            <summary>
            调试
            </summary>
        </member>
        <member name="T:Util.Logs.LogMessage">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="M:Util.Logs.LogMessage.ToString">
            <summary>
            获取格式化字符串
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Time">
            <summary>
            操作时间
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.TotalSeconds">
            <summary>
            执行时间
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Url">
            <summary>
            网址
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.BusinessId">
            <summary>
            业务编号
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Application">
            <summary>
            应用程序
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Tenant">
            <summary>
            租户
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Category">
            <summary>
            分类
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Class">
            <summary>
            类名
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Method">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Params">
            <summary>
            参数
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Ip">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Host">
            <summary>
            主机
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.ThreadId">
            <summary>
            线程号
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.UserId">
            <summary>
            用户编号
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Operator">
            <summary>
            操作人姓名
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Role">
            <summary>
            操作人角色
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Caption">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Content">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Sql">
            <summary>
            Sql语句
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.SqlParams">
            <summary>
            Sql参数
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.ErrorCode">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.Error">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:Util.Logs.LogMessage.StackTrace">
            <summary>
            堆栈跟踪
            </summary>
        </member>
        <member name="T:Util.Maps.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="M:Util.Maps.IMap.Map``2(``0)">
            <summary>
            创建目标对象,并从源对象复制属性值
            </summary>
            <typeparam name="TSource">源对象类型</typeparam>
            <typeparam name="TTarget">目标对象类型</typeparam>
            <param name="source">源对象</param>
        </member>
        <member name="M:Util.Maps.IMap.Map``2(``0,``1)">
            <summary>
            将源对象的值赋给目标对象
            </summary>
            <typeparam name="TSource">源对象类型</typeparam>
            <typeparam name="TTarget">目标对象类型</typeparam>
            <param name="source">源对象</param>
            <param name="target">目标对象</param>
        </member>
        <member name="T:Util.Net">
            <summary>
            网络操作
            </summary>
        </member>
        <member name="M:Util.Net.GetLanIp">
            <summary>
            获取局域网IP
            </summary>
        </member>
        <member name="P:Util.Net.Ip">
            <summary>
            获取Ip
            </summary>
        </member>
        <member name="P:Util.Net.Host">
            <summary>
            获取主机名
            </summary>
        </member>
        <member name="T:Util.NullObject">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:Util.NullObject.IsNull">
            <summary>
            是否空对象
            </summary>
        </member>
        <member name="T:Util.Offices.Cell">
            <summary>
            单元格
            </summary>
        </member>
        <member name="M:Util.Offices.Cell.#ctor(System.Object,System.Int32,System.Int32)">
            <summary>
            初始化单元格
            </summary>
            <param name="value">值</param>
            <param name="columnSpan">列跨度</param>
            <param name="rowSpan">行跨度</param>
        </member>
        <member name="P:Util.Offices.Cell.Row">
            <summary>
            行
            </summary>
        </member>
        <member name="P:Util.Offices.Cell.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:Util.Offices.Cell.ColumnSpan">
            <summary>
            列跨度
            </summary>
        </member>
        <member name="P:Util.Offices.Cell.RowSpan">
            <summary>
            行跨度
            </summary>
        </member>
        <member name="P:Util.Offices.Cell.RowIndex">
            <summary>
            行索引
            </summary>
        </member>
        <member name="P:Util.Offices.Cell.ColumnIndex">
            <summary>
            列索引
            </summary>
        </member>
        <member name="P:Util.Offices.Cell.EndRowIndex">
            <summary>
            结束行索引
            </summary>
        </member>
        <member name="P:Util.Offices.Cell.EndColumnIndex">
            <summary>
            结束列索引
            </summary>
        </member>
        <member name="P:Util.Offices.Cell.NeedMerge">
            <summary>
            是否需要合并单元格
            </summary>
        </member>
        <member name="P:Util.Offices.Cell.Null">
            <summary>
            创建空单元格
            </summary>
        </member>
        <member name="T:Util.Offices.CellStyle">
            <summary>
            单元格样式
            </summary>
        </member>
        <member name="M:Util.Offices.CellStyle.#ctor">
            <summary>
            初始化单元格样式
            </summary>
        </member>
        <member name="M:Util.Offices.CellStyle.Head">
            <summary>
            创建表头样式
            </summary>
        </member>
        <member name="M:Util.Offices.CellStyle.Body">
            <summary>
            创建正文样式
            </summary>
        </member>
        <member name="M:Util.Offices.CellStyle.Foot">
            <summary>
            创建页脚样式
            </summary>
        </member>
        <member name="P:Util.Offices.CellStyle.Alignment">
            <summary>
            水平对齐
            </summary>
        </member>
        <member name="P:Util.Offices.CellStyle.VerticalAlignment">
            <summary>
            垂直对齐
            </summary>
        </member>
        <member name="P:Util.Offices.CellStyle.BackgroundColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:Util.Offices.CellStyle.FillPattern">
            <summary>
            填充模式
            </summary>
        </member>
        <member name="P:Util.Offices.CellStyle.BorderColor">
            <summary>
            边框色
            </summary>
        </member>
        <member name="P:Util.Offices.CellStyle.FontSize">
            <summary>
            字号
            </summary>
        </member>
        <member name="P:Util.Offices.CellStyle.FontColor">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="P:Util.Offices.CellStyle.FontBoldWeight">
            <summary>
            字体加粗
            </summary>
        </member>
        <member name="P:Util.Offices.CellStyle.IsWrap">
            <summary>
            内容是否自动换行
            </summary>
        </member>
        <member name="T:Util.Offices.Color">
            <summary>
            颜色
            </summary>
        </member>
        <member name="T:Util.Offices.FillPattern">
            <summary>
            填充模式
            </summary>
        </member>
        <member name="T:Util.Offices.HorizontalAlignment">
            <summary>
            水平对齐
            </summary>
        </member>
        <member name="F:Util.Offices.HorizontalAlignment.Left">
            <summary>
            左对齐
            </summary>
        </member>
        <member name="F:Util.Offices.HorizontalAlignment.Right">
            <summary>
            右对齐
            </summary>
        </member>
        <member name="F:Util.Offices.HorizontalAlignment.Center">
            <summary>
            居中对齐
            </summary>
        </member>
        <member name="T:Util.Offices.IExcel">
            <summary>
            Excel操作
            </summary>
        </member>
        <member name="M:Util.Offices.IExcel.CreateWorkbook">
            <summary>
            创建工作薄
            </summary>
        </member>
        <member name="M:Util.Offices.IExcel.CreateSheet(System.String)">
            <summary>
            创建工作表
            </summary>
            <param name="sheetName">工作表名称</param>
        </member>
        <member name="M:Util.Offices.IExcel.CreateRow(System.Int32)">
            <summary>
            创建行
            </summary>
            <param name="rowIndex">行索引</param>
        </member>
        <member name="M:Util.Offices.IExcel.CreateCell(Util.Offices.Cell)">
            <summary>
            创建单元格
            </summary>
            <param name="cell">单元格</param>
        </member>
        <member name="M:Util.Offices.IExcel.Write(System.IO.Stream)">
            <summary>
            写入流
            </summary>
            <param name="stream">流</param>
        </member>
        <member name="M:Util.Offices.IExcel.DateFormat(System.String)">
            <summary>
            设置日期格式
            </summary>
            <param name="format">日期格式，默认"yyyy-mm-dd"</param>
        </member>
        <member name="M:Util.Offices.IExcel.MergeCell(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            合并单元格
            </summary>
            <param name="startRowIndex">起始行索引</param>
            <param name="endRowIndex">结束行索引</param>
            <param name="startColumnIndex">起始列索引</param>
            <param name="endColumnIndex">结束列索引</param>
        </member>
        <member name="M:Util.Offices.IExcel.MergeCell(Util.Offices.Cell)">
            <summary>
            合并单元格
            </summary>
            <param name="cell">单元格</param>
        </member>
        <member name="M:Util.Offices.IExcel.HeadStyle(Util.Offices.Table,Util.Offices.CellStyle)">
            <summary>
            设置表头样式
            </summary>
            <param name="table">表格</param>
            <param name="style">单元格样式</param>
        </member>
        <member name="M:Util.Offices.IExcel.BodyStyle(Util.Offices.Table,Util.Offices.CellStyle)">
            <summary>
            设置正文样式
            </summary>
            <param name="table">表格</param>
            <param name="style">单元格样式</param>
        </member>
        <member name="M:Util.Offices.IExcel.FootStyle(Util.Offices.Table,Util.Offices.CellStyle)">
            <summary>
            设置页脚样式
            </summary>
            <param name="table">表格</param>
            <param name="style">单元格样式</param>
        </member>
        <member name="M:Util.Offices.IExcel.ColumnWidth(System.Int32,System.Int32)">
            <summary>
            列宽
            </summary>
            <param name="columnIndex">列索引</param>
            <param name="width">列宽度，设置字符数</param>
        </member>
        <member name="T:Util.Offices.IndexManager">
            <summary>
            索引管理器
            </summary>
        </member>
        <member name="M:Util.Offices.IndexManager.#ctor">
            <summary>
            初始化索引管理器
            </summary>
        </member>
        <member name="F:Util.Offices.IndexManager._list">
            <summary>
            索引列表
            </summary>
        </member>
        <member name="M:Util.Offices.IndexManager.GetIndex(System.Int32)">
            <summary>
            获取索引
            </summary>
            <param name="span">跨度</param>
        </member>
        <member name="M:Util.Offices.IndexManager.AddIndex(System.Int32,System.Int32)">
            <summary>
            添加索引
            </summary>
            <param name="index">索引</param>
            <param name="span">跨度</param>
        </member>
        <member name="M:Util.Offices.IndexManager.AddIndex(Util.Offices.IndexRange,System.Int32,System.Int32)">
            <summary>
            添加索引
            </summary>
        </member>
        <member name="T:Util.Offices.IndexRange">
            <summary>
            索引范围
            </summary>
        </member>
        <member name="M:Util.Offices.IndexRange.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化索引范围
            </summary>
            <param name="index">当前索引</param>
            <param name="endIndex">结束索引</param>
        </member>
        <member name="M:Util.Offices.IndexRange.GetIndex(System.Int32)">
            <summary>
            获取索引
            </summary>
            <param name="span">跨度</param>
        </member>
        <member name="M:Util.Offices.IndexRange.Contains(System.Int32)">
            <summary>
            判断是否包含该索引
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="M:Util.Offices.IndexRange.Split(System.Int32,System.Int32)">
            <summary>
            分割索引范围
            </summary>
            <param name="index">索引</param>
            <param name="span">跨度</param>
        </member>
        <member name="P:Util.Offices.IndexRange.Index">
            <summary>
            当前索引
            </summary>
        </member>
        <member name="P:Util.Offices.IndexRange.EndIndex">
            <summary>
            结束索引
            </summary>
        </member>
        <member name="P:Util.Offices.IndexRange.IsEnd">
            <summary>
            是否已结束
            </summary>
        </member>
        <member name="T:Util.Offices.NullCell">
            <summary>
            空单元格
            </summary>
        </member>
        <member name="M:Util.Offices.NullCell.#ctor">
            <summary>
            初始化空单元格
            </summary>
        </member>
        <member name="M:Util.Offices.NullCell.IsNull">
            <summary>
            是否为空
            </summary>
        </member>
        <member name="T:Util.Offices.Range">
            <summary>
            区
            </summary>
        </member>
        <member name="M:Util.Offices.Range.#ctor(System.Int32)">
            <summary>
            初始化区
            </summary>
            <param name="startIndex">起始索引</param>
        </member>
        <member name="F:Util.Offices.Range._rows">
            <summary>
            行集
            </summary>
        </member>
        <member name="F:Util.Offices.Range._startIndex">
            <summary>
            起始索引
            </summary>
        </member>
        <member name="M:Util.Offices.Range.GetRow(System.Int32)">
            <summary>
            获取行
            </summary>
            <param name="index">外部索引</param>
        </member>
        <member name="M:Util.Offices.Range.GetRows">
            <summary>
            获取行
            </summary>
        </member>
        <member name="M:Util.Offices.Range.AddRow(System.Int32,System.Collections.Generic.IEnumerable{Util.Offices.Cell})">
            <summary>
            添加行
            </summary>
            <param name="rowIndex">行索引</param>
            <param name="cells">单元格集合</param>
        </member>
        <member name="M:Util.Offices.Range.CreateRow(System.Int32)">
            <summary>
            创建行
            </summary>
        </member>
        <member name="M:Util.Offices.Range.AddCell(Util.Offices.Row,Util.Offices.Cell,System.Int32)">
            <summary>
            添加单元格
            </summary>
        </member>
        <member name="M:Util.Offices.Range.AddPlaceholderCell(Util.Offices.Cell,System.Int32)">
            <summary>
            为下方受rowspan影响的行添加占位单元格
            </summary>
        </member>
        <member name="M:Util.Offices.Range.Clear">
            <summary>
            清空
            </summary>
        </member>
        <member name="P:Util.Offices.Range.Item(System.Int32)">
            <summary>
            获取行
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="P:Util.Offices.Range.ColumnNumber">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:Util.Offices.Range.Count">
            <summary>
            行数
            </summary>
        </member>
        <member name="T:Util.Offices.Row">
            <summary>
            行
            </summary>
        </member>
        <member name="M:Util.Offices.Row.#ctor(System.Int32)">
            <summary>
            初始化行
            </summary>
            <param name="rowIndex">行索引</param>
        </member>
        <member name="F:Util.Offices.Row._indexManager">
            <summary>
            索引管理器
            </summary>
        </member>
        <member name="M:Util.Offices.Row.Add(System.Object,System.Int32,System.Int32)">
            <summary>
            添加单元格
            </summary>
            <param name="value">值</param>
            <param name="columnSpan">列跨度</param>
            <param name="rowSpan">行跨度</param>
        </member>
        <member name="M:Util.Offices.Row.Add(Util.Offices.Cell)">
            <summary>
            添加单元格
            </summary>
            <param name="cell">单元格</param>
        </member>
        <member name="M:Util.Offices.Row.SetColumnIndex(Util.Offices.Cell)">
            <summary>
            设置列索引
            </summary>
        </member>
        <member name="P:Util.Offices.Row.Cells">
            <summary>
            单元格列表
            </summary>
        </member>
        <member name="P:Util.Offices.Row.Item(System.Int32)">
            <summary>
            获取单元格
            </summary>
            <param name="index">索引</param>
        </member>
        <member name="P:Util.Offices.Row.ColumnNumber">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:Util.Offices.Row.RowIndex">
            <summary>
            行索引
            </summary>
        </member>
        <member name="T:Util.Offices.Table">
            <summary>
            表格
            </summary>
        </member>
        <member name="M:Util.Offices.Table.#ctor">
            <summary>
            初始化表格
            </summary>
        </member>
        <member name="F:Util.Offices.Table._header">
            <summary>
            头部
            </summary>
        </member>
        <member name="F:Util.Offices.Table._body">
            <summary>
            正文
            </summary>
        </member>
        <member name="F:Util.Offices.Table._footer">
            <summary>
            底部
            </summary>
        </member>
        <member name="F:Util.Offices.Table._rowIndex">
            <summary>
            当前行索引
            </summary>
        </member>
        <member name="M:Util.Offices.Table.GetHeader">
            <summary>
            获取表头
            </summary>
        </member>
        <member name="M:Util.Offices.Table.GetBody">
            <summary>
            获取表格正文
            </summary>
        </member>
        <member name="M:Util.Offices.Table.GetFooter">
            <summary>
            获取页脚
            </summary>
        </member>
        <member name="M:Util.Offices.Table.AddHeadRow(System.String[])">
            <summary>
            添加表头
            </summary>
            <param name="titles">标题</param>
        </member>
        <member name="M:Util.Offices.Table.AddHeadRow(Util.Offices.Cell[])">
            <summary>
            添加表头
            </summary>
            <param name="cells">表头</param>
        </member>
        <member name="M:Util.Offices.Table.AddRowToHeader(System.Collections.Generic.IEnumerable{Util.Offices.Cell})">
            <summary>
            添加表头行
            </summary>
        </member>
        <member name="M:Util.Offices.Table.ResetFirstColumnSpan">
            <summary>
            重置第一行的列跨度，第一行可能为总标题
            </summary>
        </member>
        <member name="M:Util.Offices.Table.AddBodyRow(System.Object[])">
            <summary>
            添加正文
            </summary>
            <param name="cellValues">值</param>
        </member>
        <member name="M:Util.Offices.Table.AddBodyRow(System.Collections.Generic.IEnumerable{Util.Offices.Cell})">
            <summary>
            添加正文
            </summary>
            <param name="cells">单元格集合</param>
        </member>
        <member name="M:Util.Offices.Table.GetBodyRange">
            <summary>
            获取正文区域
            </summary>
        </member>
        <member name="M:Util.Offices.Table.AddFootRow(System.String[])">
            <summary>
            添加页脚
            </summary>
            <param name="cellValues">值</param>
        </member>
        <member name="M:Util.Offices.Table.AddFootRow(Util.Offices.Cell[])">
            <summary>
            添加页脚
            </summary>
            <param name="cells">单元格集合</param>
        </member>
        <member name="M:Util.Offices.Table.GetFootRange">
            <summary>
            获取页脚区域
            </summary>
        </member>
        <member name="M:Util.Offices.Table.ClearHeader">
            <summary>
            清空表头
            </summary>
        </member>
        <member name="P:Util.Offices.Table.Title">
            <summary>
            总标题
            </summary>
        </member>
        <member name="P:Util.Offices.Table.ColumnNumber">
            <summary>
            列数
            </summary>
        </member>
        <member name="P:Util.Offices.Table.HeadRowCount">
            <summary>
            表头行数
            </summary>
        </member>
        <member name="P:Util.Offices.Table.BodyRowCount">
            <summary>
            正文行数
            </summary>
        </member>
        <member name="P:Util.Offices.Table.FootRowCount">
            <summary>
            页脚行数
            </summary>
        </member>
        <member name="P:Util.Offices.Table.Count">
            <summary>
            总行数
            </summary>
        </member>
        <member name="T:Util.Offices.VerticalAlignment">
            <summary>
            垂直对齐
            </summary>
        </member>
        <member name="F:Util.Offices.VerticalAlignment.Top">
            <summary>
            顶部对齐
            </summary>
        </member>
        <member name="F:Util.Offices.VerticalAlignment.Bottom">
            <summary>
            底部对齐
            </summary>
        </member>
        <member name="F:Util.Offices.VerticalAlignment.Center">
            <summary>
            居中对齐
            </summary>
        </member>
        <member name="T:Util.Operator">
            <summary>
            操作符
            </summary>
        </member>
        <member name="F:Util.Operator.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:Util.Operator.NotEqual">
            <summary>
            不等于
            </summary>
        </member>
        <member name="F:Util.Operator.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:Util.Operator.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:Util.Operator.GreaterEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:Util.Operator.LessEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:Util.Operator.Contains">
            <summary>
            头尾匹配
            </summary>
        </member>
        <member name="F:Util.Operator.Starts">
            <summary>
            头匹配
            </summary>
        </member>
        <member name="F:Util.Operator.Ends">
            <summary>
            尾匹配
            </summary>
        </member>
        <member name="T:Util.OrderByAttribute">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:Util.OrderByAttribute.#ctor(System.Int32)">
            <summary>
            初始化排序
            </summary>
            <param name="sortId">排序号</param>
        </member>
        <member name="P:Util.OrderByAttribute.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:Util.R">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Util.R.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Util.R.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Util.R.ConcurrencyExceptionMessage">
            <summary>
              查找类似 当前操作的数据已被其它人修改，请刷新后重试 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.DataBaseRefrenceError">
            <summary>
              查找类似 对不起，不能删除该记录，因为该记录已经关联了相关数据，请删除相关数据后重试 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.DeleteSuccess">
            <summary>
              查找类似 删除成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.InvalidFile">
            <summary>
              查找类似 名为 {0} 的文件无效 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.IsEmpty">
            <summary>
              查找类似 不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.RememberSave">
            <summary>
              查找类似 进行该操作后，记得保存 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.SaveSuccess">
            <summary>
              查找类似 保存成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.R.SystemError">
            <summary>
              查找类似 系统忙，请稍后再试 的本地化字符串。
            </summary>
        </member>
        <member name="T:Util.Random">
            <summary>
            随机数操作
            </summary>
        </member>
        <member name="F:Util.Random._random">
            <summary>
            随机数
            </summary>
        </member>
        <member name="M:Util.Random.#ctor">
            <summary>
            初始化随机数
            </summary>
        </member>
        <member name="M:Util.Random.GetInt(System.Int32,System.Int32)">
            <summary>
            获取指定范围的随机整数，该范围包括最小值，但不包括最大值
            </summary>
            <param name="minNum">最小值</param>
            <param name="maxNum">最大值</param>
        </member>
        <member name="M:Util.Random.GetSortList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取随机排序的集合
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="array">集合</param>
        </member>
        <member name="T:Util.RandomBuilder">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:Util.RandomBuilder.#ctor">
            <summary>
            初始化随机数生成器
            </summary>
        </member>
        <member name="F:Util.RandomBuilder._random">
            <summary>
            随机数操作
            </summary>
        </member>
        <member name="M:Util.RandomBuilder.GenerateString(System.Int32)">
            <summary>
            生成随机字符串
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:Util.RandomBuilder.GenerateChinese(System.Int32)">
            <summary>
            生成随机常用汉字
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:Util.RandomBuilder.GenerateLetters(System.Int32)">
            <summary>
            生成随机字母，不出现汉字和数字
            </summary>
            <param name="maxLength">最大长度</param>
        </member>
        <member name="M:Util.RandomBuilder.Generate(System.Int32,System.String)">
            <summary>
            生成随机字符串
            </summary>
        </member>
        <member name="M:Util.RandomBuilder.GetLength(System.Int32)">
            <summary>
            获取随机长度
            </summary>
        </member>
        <member name="M:Util.RandomBuilder.GetRandomChar(System.String)">
            <summary>
            获取随机字符
            </summary>
        </member>
        <member name="M:Util.RandomBuilder.GenerateBool">
            <summary>
            生成随机布尔值
            </summary>
        </member>
        <member name="M:Util.RandomBuilder.GenerateDate(System.Int32,System.Int32)">
            <summary>
            生成随机日期
            </summary>
            <param name="beginYear">起始年份</param>
            <param name="endYear">结束年份</param>
        </member>
        <member name="M:Util.RandomBuilder.GenerateInt(System.Int32)">
            <summary>
            生成随机整数
            </summary>
            <param name="maxValue">整数最大值</param>
        </member>
        <member name="M:Util.RandomBuilder.GenerateEnum``1">
            <summary>
            生成随机枚举
            </summary>
            <typeparam name="T">枚举</typeparam>
        </member>
        <member name="T:Util.Reflection">
            <summary>
            反射操作
            </summary>
        </member>
        <member name="M:Util.Reflection.GetAssembly(System.String)">
            <summary>
            获取程序集
            </summary>
            <param name="assemblyName">程序集名称</param>
        </member>
        <member name="M:Util.Reflection.GetDescription``1(System.String)">
            <summary>
            获取描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:Util.Reflection.GetDescription(System.Type,System.String)">
            <summary>
            获取描述
            </summary>
            <param name="type">类型</param>
            <param name="memberName">成员名称</param>
        </member>
        <member name="M:Util.Reflection.GetDescription(System.Type,System.Reflection.FieldInfo)">
            <summary>
            获取描述
            </summary>
            <param name="type">类型</param>
            <param name="field">成员</param>
        </member>
        <member name="M:Util.Reflection.CreateInstance``1(System.String,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="className">类名，包括命名空间,如果类型不处于当前执行程序集中，需要包含程序集名，范例：Test.Core.Test2,Test.Core</param>
            <param name="parameters">传递给构造函数的参数</param>        
        </member>
        <member name="M:Util.Reflection.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="type">类型</param>
            <param name="parameters">传递给构造函数的参数</param>        
        </member>
        <member name="M:Util.Reflection.IsBool(System.Reflection.MemberInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Reflection.IsBool(System.Reflection.PropertyInfo)">
            <summary>
            是否布尔类型
            </summary>
        </member>
        <member name="M:Util.Reflection.IsEnum(System.Reflection.MemberInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Reflection.IsEnum(System.Reflection.PropertyInfo)">
            <summary>
            是否枚举类型
            </summary>
        </member>
        <member name="M:Util.Reflection.IsDate(System.Reflection.MemberInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Reflection.IsDate(System.Reflection.PropertyInfo)">
            <summary>
            是否日期类型
            </summary>
        </member>
        <member name="M:Util.Reflection.IsInt(System.Reflection.MemberInfo)">
            <summary>
            是否整型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Reflection.IsInt(System.Reflection.PropertyInfo)">
            <summary>
            是否整型
            </summary>
        </member>
        <member name="M:Util.Reflection.IsNumber(System.Reflection.MemberInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="member">成员</param>
        </member>
        <member name="M:Util.Reflection.IsNumber(System.Reflection.PropertyInfo)">
            <summary>
            是否整型
            </summary>
        </member>
        <member name="M:Util.Reflection.GetByInterface``1(System.Reflection.Assembly)">
            <summary>
            获取实现了接口的所有具体类型
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="assembly">在该程序集中查找</param>
        </member>
        <member name="M:Util.Reflection.GetAssemblies(System.String)">
            <summary>
            从目录中获取所有程序集
            </summary>
            <param name="directoryPath">目录绝对路径</param>
        </member>
        <member name="T:Util.Regex">
            <summary>
            正则表达式操作
            </summary>
        </member>
        <member name="M:Util.Regex.IsMatch(System.String,System.String)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:Util.Regex.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入与模式是否匹配
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件,比如是否忽略大小写</param>
        </member>
        <member name="M:Util.Regex.Replace(System.String,System.String,System.String,System.Int32)">
            <summary>
            获取匹配的值
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="replaceText">结果模式字符串,范例："$1"用来获取第一个( )内的值</param>
            <param name="count">替换次数</param>
        </member>
        <member name="T:Util.ResourceHelper">
            <summary>
            资源操作
            </summary>
        </member>
        <member name="M:Util.ResourceHelper.GetString(System.String,System.String)">
            <summary>
            获取资源文件中的字符串
            </summary>
            <param name="resourceName">资源名,应使用完全限定名称，范例：Test.Unit.Resources.TestResource</param>
            <param name="key">键名</param>
        </member>
        <member name="M:Util.ResourceHelper.GetString(System.String,System.String,System.String)">
            <summary>
            获取资源文件中的字符串
            </summary>
            <param name="resourceName">资源名,应使用完全限定名称，范例：Test.Unit.Resources.TestResource</param>
            <param name="key">键名</param>
            <param name="assemblyName">程序集名称</param>
        </member>
        <member name="M:Util.ResourceHelper.GetString(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            获取资源文件中的字符串
            </summary>
            <param name="resourceName">资源名,应使用完全限定名称，范例：Test.Unit.Resources.TestResource</param>
            <param name="key">键名</param>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Util.ResourceHelper.ValidateGetString(System.String,System.String)">
            <summary>
            验证获取资源文件中的字符串
            </summary>
        </member>
        <member name="M:Util.ResourceHelper.GetResourceStringFromAssmbly(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            从资源中获取字符串
            </summary>
        </member>
        <member name="M:Util.ResourceHelper.GetStringByManager(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            获取资源文件中的字符串
            </summary>
        </member>
        <member name="M:Util.ResourceHelper.GetResourceFullName(System.String,System.Reflection.Assembly)">
            <summary>
            获取资源名的全名
            </summary>
        </member>
        <member name="T:Util.Serialize">
            <summary>
            序列化操作
            </summary>
        </member>
        <member name="M:Util.Serialize.ToBytes(System.Object)">
            <summary>
            将对象序列化到字节流中
            </summary>
            <param name="instance">对象</param>        
        </member>
        <member name="M:Util.Serialize.FromBytes``1(System.Byte[])">
            <summary>
            将字节流反序列化为对象
            </summary>
            <typeparam name="T">对象类名</typeparam>
            <param name="buffer">字节流</param>        
        </member>
        <member name="T:Util.Size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="M:Util.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化尺寸
            </summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
        </member>
        <member name="P:Util.Size.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:Util.Size.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="T:Util.Str">
            <summary>
            字符串操作
            </summary>
            <summary>
            字符串操作 - 工具方法
            </summary>
        </member>
        <member name="M:Util.Str.#ctor">
            <summary>
            初始化字符串操作
            </summary>
        </member>
        <member name="M:Util.Str.Add``1(``0)">
            <summary>
            添加内容
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Str.Add(System.String,System.Object[])">
            <summary>
            添加内容
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Util.Str.AddLine">
            <summary>
            添加换行
            </summary>
        </member>
        <member name="M:Util.Str.AddLine``1(``0)">
            <summary>
            添加内容并换行
            </summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Str.AddLine(System.String,System.Object[])">
            <summary>
            添加内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
        </member>
        <member name="M:Util.Str.RemoveEnd(System.String)">
            <summary>
            移除末尾字符串
            </summary>
            <param name="end">末尾字符串</param>
        </member>
        <member name="M:Util.Str.Clear">
            <summary>
            清空字符串
            </summary>
        </member>
        <member name="M:Util.Str.ToString">
            <summary>
            转换为字符串
            </summary>
        </member>
        <member name="M:Util.Str.GenerateCode">
            <summary>
            创建一个32位流水号
            </summary>
        </member>
        <member name="M:Util.Str.GenerateCodeBy16">
            <summary>
            创建一个16位流水号
            </summary>
        </member>
        <member name="M:Util.Str.PinYin(System.String)">
            <summary>
            获取汉字的拼音简码，即首字母缩写,范例：中国,返回zg
            </summary>
            <param name="chineseText">汉字文本,范例： 中国</param>
        </member>
        <member name="M:Util.Str.ResolvePinYin(System.Char)">
            <summary>
            解析单个汉字的拼音简码
            </summary>
            <param name="text">单个汉字</param>
        </member>
        <member name="M:Util.Str.ResolvePinYinByCode(System.UInt16)">
            <summary>
            使用字符编码方式获取拼音简码
            </summary>
        </member>
        <member name="M:Util.Str.ResolvePinYinByFile(System.String)">
            <summary>
            从拼音简码文件获取
            </summary>
            <param name="text">单个汉字</param>
        </member>
        <member name="M:Util.Str.Splice``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            拼接集合元素
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="list">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号 "'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
        </member>
        <member name="M:Util.Str.FirstUpper(System.String)">
            <summary>
            将值的首字母大写
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Str.ToCamel(System.String)">
            <summary>
            将字符串转成驼峰形式
            </summary>
            <param name="value">原始字符串</param>
        </member>
        <member name="M:Util.Str.ContainsChinese(System.String)">
            <summary>
            是否包含中文
            </summary>
            <param name="text">文本</param>
        </member>
        <member name="M:Util.Str.ContainsNumber(System.String)">
            <summary>
            是否包含数字
            </summary>
            <param name="text">文本</param>
        </member>
        <member name="M:Util.Str.Distinct(System.String)">
            <summary>
            去除重复
            </summary>
            <param name="value">值，范例1："5555",返回"5",范例2："4545",返回"45"</param>
        </member>
        <member name="M:Util.Str.Truncate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截断字符串
            </summary>
            <param name="text">文本</param>
            <param name="length">返回长度</param>
            <param name="endCharCount">添加结束符号的个数，默认0，不添加</param>
            <param name="endChar">结束符号，默认为省略号</param>
        </member>
        <member name="M:Util.Str.GetEndString(System.Int32,System.String)">
            <summary>
            获取结束字符串
            </summary>
        </member>
        <member name="M:Util.Str.ToSimplifiedChinese(System.String)">
            <summary>
            转换为简体中文
            </summary>
            <param name="text">繁体中文</param>
        </member>
        <member name="M:Util.Str.ToTraditionalChinese(System.String)">
            <summary>
            转换为繁体中文
            </summary>
            <param name="text">简体中文</param>
        </member>
        <member name="M:Util.Str.Unique">
            <summary>
            获取全局唯一值
            </summary>
        </member>
        <member name="M:Util.Str.GetLastProperty(System.String)">
            <summary>
            获取最后一个属性
            </summary>
            <param name="propertyName">属性名，范例，A.B.C,返回"C"</param>
        </member>
        <member name="P:Util.Str.Builder">
            <summary>
            字符串生成器
            </summary>
        </member>
        <member name="P:Util.Str.Length">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="P:Util.Str.Empty">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="T:Util.Sys">
            <summary>
            系统操作
            </summary>
        </member>
        <member name="M:Util.Sys.GetType``1">
            <summary>
            获取类型,对可空类型进行处理
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:Util.Sys.GetPhysicalPath(System.String)">
            <summary>
            获取物理路径
            </summary>
            <param name="relativePath">相对路径</param>
        </member>
        <member name="M:Util.Sys.Clone``1(``0)">
            <summary>
            使用序列化机制克隆一个对象
            </summary>
            <typeparam name="T">原始对象的类名</typeparam>
            <param name="instance">原始对象实例</param>
        </member>
        <member name="M:Util.Sys.StartProcess(System.String)">
            <summary>
            启动进程
            </summary>
            <param name="processName">进程名称</param>
        </member>
        <member name="P:Util.Sys.Line">
            <summary>
            换行符
            </summary>
        </member>
        <member name="P:Util.Sys.Guid">
            <summary>
            Guid
            </summary>
        </member>
        <member name="T:Util.Test">
            <summary>
            测试操作
            </summary>
        </member>
        <member name="M:Util.Test.#ctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="F:Util.Test._watch">
            <summary>
            测试运行时间
            </summary>
        </member>
        <member name="M:Util.Test.Start">
            <summary>
            开始计时
            </summary>
        </member>
        <member name="M:Util.Test.Reset">
            <summary>
            重置计时器
            </summary>
        </member>
        <member name="M:Util.Test.Stop">
            <summary>
            停止计时
            </summary>
        </member>
        <member name="M:Util.Test.GetElapsed">
            <summary>
            获取运行时间间隔,单位：秒
            </summary>
        </member>
        <member name="M:Util.Test.GetElapsedAndStop">
            <summary>
            停止并获取运行时间间隔,单位：秒
            </summary>
        </member>
        <member name="T:Util.Tests.UnitTest">
            <summary>
            单元测试辅助操作
            </summary>
        </member>
        <member name="M:Util.Tests.UnitTest.TestConcurrency(System.Action,System.Int32)">
            <summary>
            并发测试
            </summary>
            <param name="action">各线程执行的方法</param>
            <param name="threadNumber">启动线程数，默认为1个</param>
        </member>
        <member name="T:Util.Thread">
            <summary>
            线程操作
            </summary>
        </member>
        <member name="M:Util.Thread.Sleep(System.Int32)">
            <summary>
            线程等待
            </summary>
            <param name="time">等待时间，单位：毫秒</param>
        </member>
        <member name="M:Util.Thread.StartTask(System.Action)">
            <summary>
            启动异步任务
            </summary>
            <param name="handler">任务，范例：() => { 代码 }</param>
        </member>
        <member name="P:Util.Thread.ThreadId">
            <summary>
            线程编号
            </summary>
        </member>
        <member name="P:Util.Thread.CurrentPrincipal">
            <summary>
            获取当前安全主体
            </summary>
        </member>
        <member name="P:Util.Thread.MaxThreadNumberInThreadPool">
            <summary>
            获取线程池中最大线程数
            </summary>
        </member>
        <member name="T:Util.Time">
            <summary>
            时间操作
            </summary>
        </member>
        <member name="F:Util.Time._dateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="M:Util.Time.SetTime(System.Nullable{System.DateTime})">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:Util.Time.SetTime(System.String)">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:Util.Time.Reset">
            <summary>
            重置时间
            </summary>
        </member>
        <member name="M:Util.Time.GetDateTime">
            <summary>
            获取当前日期时间
            </summary>
        </member>
        <member name="M:Util.Time.GetDate">
            <summary>
            获取当前日期,不带时间
            </summary>
        </member>
        <member name="M:Util.Time.GetUnixTimestamp">
            <summary>
            获取Unix时间戳
            </summary>
        </member>
        <member name="M:Util.Time.GetUnixTimestamp(System.DateTime)">
            <summary>
            获取Unix时间戳
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:Util.Time.GetTimeFromUnixTimestamp(System.Int64)">
            <summary>
            从Unix时间戳获取时间
            </summary>
            <param name="timestamp">Unix时间戳</param>
        </member>
        <member name="M:Util.Time.Format(System.TimeSpan)">
            <summary>
            格式化时间间隔
            </summary>
            <param name="span">时间间隔</param>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.EqualToAttribute">
            <summary>
            Validates that the property has the same value as the given 'otherProperty' 
            </summary>
            <remarks>
            From Mvc3 Futures
            </remarks>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.MobilePhoneAttribute">
            <summary>
            手机号验证
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MobilePhoneAttribute.FormatErrorMessage(System.String)">
            <summary>
            格式化错误消息
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.MobilePhoneAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            是否验证通过
            </summary>
        </member>
        <member name="T:Util.Validations.DataAnnotations.ValidatorResources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.BindingBehavior_ValueNotFound">
            <summary>
              查找类似 A value for &apos;{0}&apos; is required but was not present in the request. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ChildActionCacheAttribute_DurationMustBePositive">
            <summary>
              查找类似 The &apos;Duration&apos; property must be a positive number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.Common_ModelBinderDoesNotSupportModelType">
            <summary>
              查找类似 This model binder does not support the model type &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.Common_NullOrEmpty">
            <summary>
              查找类似 Value cannot be null or empty. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.Common_PropertyNotFound">
            <summary>
              查找类似 The property {0}.{1} could not be found. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.Common_TypeMustImplementInterface">
            <summary>
              查找类似 The type &apos;{0}&apos; does not implement the interface &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.CommonControls_NameRequired">
            <summary>
              查找类似 The &apos;Name&apos; property must be set. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.CompareAttribute_MustMatch">
            <summary>
              查找类似 &apos;{0}&apos; and &apos;{1}&apos; do not match. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ControllerBuilder_FactoryReturnedNull">
            <summary>
              查找类似 The IControllerFactory &apos;{0}&apos; did not return a controller for a controller named &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.CreditCardAttribute_Invalid">
            <summary>
              查找类似 The {0} field is not a valid credit card number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.CuitAttribute_Invalid">
            <summary>
              查找类似 The {0} field is not a valid CUIT number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.DataAnnotationsModelMetadataProvider_UnknownProperty">
            <summary>
              查找类似 {0} has a DisplayColumn attribute for {1}, but property {1} does not exist. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.DataAnnotationsModelMetadataProvider_UnreadableProperty">
            <summary>
              查找类似 {0} has a DisplayColumn attribute for {1}, but property {1} does not have a public getter. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.DateAttribute_Invalid">
            <summary>
              查找类似 The field {0} is not a valid date 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.DigitsAttribute_Invalid">
            <summary>
              查找类似 The field {0} should contain only digits 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.DropDownList_SampleItem">
            <summary>
              查找类似 Sample Item 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.DynamicViewDataDictionary_SingleIndexerOnly">
            <summary>
              查找类似 DynamicViewDataDictionary only supports single indexers. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.DynamicViewDataDictionary_StringIndexerOnly">
            <summary>
              查找类似 DynamicViewDataDictionary only supports string-based indexers. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.DynamicViewPage_NoProperties">
            <summary>
              查找类似 The property {0} doesn&apos;t exist. There are no public properties on this object. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.DynamicViewPage_PropertyDoesNotExist">
            <summary>
              查找类似 The property {0} doesn&apos;t exist. Supported properties are: {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.EmailAddressAttribute_Invalid">
            <summary>
              查找类似 电子邮件的格式不正确，请修改 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.EqualTo_UnknownProperty">
            <summary>
              查找类似 Could not find a property named {0}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ExpressionHelper_CannotCallCompletedMethod">
            <summary>
              查找类似 The method &apos;{0}&apos; is an asynchronous completion method and cannot be called directly. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ExpressionHelper_CannotCallNonAction">
            <summary>
              查找类似 The method &apos;{0}&apos; is marked [NonAction] and cannot be called directly. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ExpressionHelper_CannotRouteToController">
            <summary>
              查找类似 Cannot route to class named &apos;Controller&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ExpressionHelper_MustBeMethodCall">
            <summary>
              查找类似 Expression must be a method call. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ExpressionHelper_TargetMustEndInController">
            <summary>
              查找类似 Controller name must end in &apos;Controller&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ExtensibleModelBinderAdapter_PropertyFilterMustNotBeSet">
            <summary>
              查找类似 The new model binding system cannot be used when a property whitelist or blacklist has been specified in [Bind] or via the call to UpdateModel() / TryUpdateModel(). Use the [BindRequired] and [BindNever] attributes on the model type or its properties instead. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.FileExtensionsAttribute_Invalid">
            <summary>
              查找类似 The {0} field only accepts files with the following extensions: {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.GenericModelBinderProvider_ParameterMustSpecifyOpenGenericType">
            <summary>
              查找类似 The type &apos;{0}&apos; is not an open generic type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.GenericModelBinderProvider_TypeArgumentCountMismatch">
            <summary>
              查找类似 The open model type &apos;{0}&apos; has {1} generic type argument(s), but the open binder type &apos;{2}&apos; has {3} generic type argument(s). The binder type must not be an open generic type or must have the same number of generic arguments as the open model type. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.HtmlHelper_MissingSelectData">
            <summary>
              查找类似 There is no ViewData item with the key &apos;{0}&apos; of type &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.HtmlHelper_WrongSelectDataType">
            <summary>
              查找类似 The ViewData item with the key &apos;{0}&apos; is of type &apos;{1}&apos; but needs to be of type &apos;{2}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.IntegerAttribute_Invalid">
            <summary>
              查找类似 The field {0} should be a positive or negative non-decimal number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.InvalidMobilePhone">
            <summary>
              查找类似 手机号无效 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.MaxAttribute_Invalid">
            <summary>
              查找类似 The field {0} must be less than or equal to {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.MinAttribute_Invalid">
            <summary>
              查找类似 The field {0} must be greater than or equal to {1} 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ModelBinderConfig_ValueInvalid">
            <summary>
              查找类似 The value &apos;{0}&apos; is not valid for {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ModelBinderConfig_ValueRequired">
            <summary>
              查找类似 A value is required. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ModelBinderProviderCollection_BinderForTypeNotFound">
            <summary>
              查找类似 A binder for type {0} could not be located. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ModelBinderProviderCollection_InvalidBinderType">
            <summary>
              查找类似 The type &apos;{0}&apos; does not subclass {1} or implement the interface {2}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ModelBinderProviderCollection_TypeCannotHaveBindAttribute">
            <summary>
              查找类似 The model of type &apos;{0}&apos; has a [Bind] attribute. The new model binding system cannot be used with models that have type-level [Bind] attributes. Use the [BindRequired] and [BindNever] attributes on the model type or its properties instead. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ModelBinderUtil_ModelCannotBeNull">
            <summary>
              查找类似 The binding context has a null Model, but this binder requires a non-null model of type &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ModelBinderUtil_ModelInstanceIsWrong">
            <summary>
              查找类似 The binding context has a Model of type &apos;{0}&apos;, but this binder can only operate on models of type &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ModelBinderUtil_ModelMetadataCannotBeNull">
            <summary>
              查找类似 The binding context cannot have a null ModelMetadata. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ModelBinderUtil_ModelTypeIsWrong">
            <summary>
              查找类似 The binding context has a ModelType of &apos;{0}&apos;, but this binder can only operate on models of type &apos;{1}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ModelBindingContext_ModelMetadataMustBeSet">
            <summary>
              查找类似 The ModelMetadata property must be set before accessing this property. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.MvcDynamicSessionModule_WrongControllerFactory">
            <summary>
              查找类似 The ControllerBuilder must return an IControllerFactory of type {0} if the MvcDynamicSessionModule is enabled. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.MvcSerializer_DeserializationFailed">
            <summary>
              查找类似 Deserialization failed. Verify that the data is being deserialized using the same SerializationMode with which it was serialized. Otherwise see the inner exception. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.MvcSerializer_InvalidSerializationMode">
            <summary>
              查找类似 The provided SerializationMode is invalid. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.MvcSerializer_MagicHeaderCheckFailed">
            <summary>
              查找类似 The data being serialized is corrupt. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.NumericAttribute_Invalid">
            <summary>
              查找类似 The {0} field is not a valid number. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ResourceControllerFactory_ConflictingActions">
            <summary>
              查找类似 Error dispatching on controller {0}, conflicting actions matched: {1}. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.ResourceControllerFactory_NoActions">
            <summary>
              查找类似 Error dispatching on controller {0}, no actions matched. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.Resources_UnsupportedFormat">
            <summary>
              查找类似 Format &apos;{0}&apos; is not supported. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.Resources_UnsupportedMediaType">
            <summary>
              查找类似 Unsupported Media Type: &apos;{0}&apos;. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.UrlAttribute_Invalid">
            <summary>
              查找类似 The {0} field is not a valid fully-qualified http, https, or ftp URL. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.UrlAttributeProtocolOptional_Invalid">
            <summary>
              查找类似 The {0} field is not a valid URL. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.UrlAttributeWithoutProtocol_Invalid">
            <summary>
              查找类似 The {0} field is not a valid protocol-less URL. 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Validations.DataAnnotations.ValidatorResources.YearAttribute_Invalid">
            <summary>
              查找类似 The {0} field is not a valid year 的本地化字符串。
            </summary>
        </member>
        <member name="T:Util.Validations.IValidation">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:Util.Validations.IValidation.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">验证目标</param>
        </member>
        <member name="T:Util.Validations.IValidationHandler">
            <summary>
            验证处理器
            </summary>
        </member>
        <member name="M:Util.Validations.IValidationHandler.Handle(Util.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:Util.Validations.IValidationRule">
            <summary>
            验证规则
            </summary>
        </member>
        <member name="M:Util.Validations.IValidationRule.Validate">
            <summary>
            验证
            </summary>
        </member>
        <member name="T:Util.Validations.Validation">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:Util.Validations.Validation.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">验证目标</param>
        </member>
        <member name="T:Util.Validations.Validation2">
            <summary>
            验证操作
            </summary>
        </member>
        <member name="M:Util.Validations.Validation2.#ctor">
            <summary>
            初始化验证操作
            </summary>
        </member>
        <member name="F:Util.Validations.Validation2._target">
            <summary>
            验证目标
            </summary>
        </member>
        <member name="F:Util.Validations.Validation2._result">
            <summary>
            结果
            </summary>
        </member>
        <member name="M:Util.Validations.Validation2.Validate(System.Object)">
            <summary>
            验证
            </summary>
            <param name="target">验证目标</param>
        </member>
        <member name="M:Util.Validations.Validation2.ValidateProperty(System.Reflection.PropertyInfo)">
            <summary>
            验证属性
            </summary>
        </member>
        <member name="M:Util.Validations.Validation2.ValidateAttribute(System.Reflection.PropertyInfo,System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            验证特性
            </summary>
        </member>
        <member name="M:Util.Validations.Validation2.GetErrorMessage(System.ComponentModel.DataAnnotations.ValidationAttribute)">
            <summary>
            获取错误消息
            </summary>
        </member>
        <member name="T:Util.Validations.ValidationHandler">
            <summary>
            默认验证处理器，直接抛出异常
            </summary>
        </member>
        <member name="M:Util.Validations.ValidationHandler.Handle(Util.Validations.ValidationResultCollection)">
            <summary>
            处理验证错误
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="T:Util.Validations.ValidationResultCollection">
            <summary>
            验证结果集合
            </summary>
        </member>
        <member name="M:Util.Validations.ValidationResultCollection.#ctor">
            <summary>
            初始化验证结果集合
            </summary>
        </member>
        <member name="F:Util.Validations.ValidationResultCollection._results">
            <summary>
            验证结果
            </summary>
        </member>
        <member name="M:Util.Validations.ValidationResultCollection.Add(System.ComponentModel.DataAnnotations.ValidationResult)">
            <summary>
            添加验证结果
            </summary>
            <param name="result">验证结果</param>
        </member>
        <member name="M:Util.Validations.ValidationResultCollection.AddResults(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            添加验证结果集合
            </summary>
            <param name="results">验证结果集合</param>
        </member>
        <member name="M:Util.Validations.ValidationResultCollection.System#Collections#Generic#IEnumerable{System#ComponentModel#DataAnnotations#ValidationResult}#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="M:Util.Validations.ValidationResultCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            获取迭代器
            </summary>
        </member>
        <member name="P:Util.Validations.ValidationResultCollection.IsValid">
            <summary>
            是否有效
            </summary>
        </member>
        <member name="P:Util.Validations.ValidationResultCollection.Count">
            <summary>
            验证结果个数
            </summary>
        </member>
        <member name="T:Util.Wcf">
            <summary>
            Wcf操作
            </summary>
        </member>
        <member name="M:Util.Wcf.CreateProxy``1(System.String)">
            <summary>
            创建客户端代理对象
            </summary>
            <typeparam name="T">操作契约类型,范例: IService</typeparam>
            <param name="endpointConfigName">配置文件中客户端终结点的名称</param>
        </member>
        <member name="M:Util.Wcf.CreateProxy``1(System.String,System.String,System.String)">
            <summary>
            创建客户端代理对象
            </summary>
            <typeparam name="T">操作契约类型,范例: IService</typeparam>
            <param name="endpointConfigName">配置文件中客户端终结点的名称</param>
            <param name="userName">用户名</param>
            <param name="password">密码</param>
        </member>
        <member name="M:Util.Wcf.CloseProxy(System.Object)">
            <summary>
            关闭客户端代理对象
            </summary>
            <param name="proxy">客户端代理对象</param>
        </member>
        <member name="T:Util.Web">
            <summary>
            Web操作
            </summary>
        </member>
        <member name="M:Util.Web.ResolveUrl(System.String)">
            <summary>
            解析相对Url
            </summary>
            <param name="relativeUrl">相对Url</param>
        </member>
        <member name="M:Util.Web.HtmlEncode(System.String)">
            <summary>
            对html字符串进行编码
            </summary>
            <param name="html">html字符串</param>
        </member>
        <member name="M:Util.Web.UrlEncode(System.String,System.Boolean)">
            <summary>
            对Url进行编码
            </summary>
            <param name="url">url</param>
            <param name="isUpper">编码字符是否转成大写,范例,"http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:Util.Web.UrlEncode(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            对Url进行编码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码</param>
            <param name="isUpper">编码字符是否转成大写,范例,"http://"转成"http%3A%2F%2F"</param>
        </member>
        <member name="M:Util.Web.GetUpperEncode(System.String)">
            <summary>
            获取大写编码字符串
            </summary>
        </member>
        <member name="M:Util.Web.UrlDecode(System.String)">
            <summary>
            对Url进行解码,对于javascript的encodeURIComponent函数编码参数,应使用utf-8字符编码来解码
            </summary>
            <param name="url">url</param>
        </member>
        <member name="M:Util.Web.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            对Url进行解码,对于javascript的encodeURIComponent函数编码参数,应使用utf-8字符编码来解码
            </summary>
            <param name="url">url</param>
            <param name="encoding">字符编码,对于javascript的encodeURIComponent函数编码参数,应使用utf-8字符编码来解码</param>
        </member>
        <member name="M:Util.Web.SetSession``1(System.String,``0)">
            <summary>
            创建Session
            </summary>
            <typeparam name="T">Session键值的类型</typeparam>
            <param name="key">Session的键名</param>
            <param name="value">Session的键值</param>
        </member>
        <member name="M:Util.Web.SetSession(System.String,System.String)">
            <summary>
            创建Session
            </summary>
            <param name="key">Session的键名</param>
            <param name="value">Session的键值</param>
        </member>
        <member name="M:Util.Web.GetSession``1(System.String)">
            <summary>
            读取Session的值
            </summary>
            <typeparam name="T">Session键值的类型</typeparam>
            <param name="key">Session的键名</param>        
        </member>
        <member name="M:Util.Web.GetSession(System.String)">
            <summary>
            读取Session的值
            </summary>
            <param name="key">Session的键名</param>        
        </member>
        <member name="M:Util.Web.RemoveSession(System.String)">
            <summary>
            删除指定Session
            </summary>
            <param name="key">Session的键名</param>
        </member>
        <member name="M:Util.Web.DownloadFile(System.String,System.String)">
            <summary>
            下载文件
            </summary>
            <param name="filePath">文件绝对路径</param>
            <param name="fileName">文件名,包含扩展名</param>
        </member>
        <member name="M:Util.Web.DownloadFile(System.String,System.String,System.Text.Encoding)">
            <summary>
            下载文件
            </summary>
            <param name="filePath">文件绝对路径</param>
            <param name="fileName">文件名,包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Web.DownloadUrl(System.String,System.String)">
            <summary>
            从Http地址下载
            </summary>
            <param name="url">Http地址，范例：http://www.test.com/a.rar </param>
            <param name="fileName">文件名，包括扩展名</param>
        </member>
        <member name="M:Util.Web.DownloadUrl(System.String,System.String,System.Text.Encoding)">
            <summary>
            从Http地址下载
            </summary>
            <param name="url">Http地址，范例：http://www.test.com/a.rar </param>
            <param name="fileName">文件名，包括扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Web.Download(System.String,System.String)">
            <summary>
            下载
            </summary>
            <param name="text">文本</param>
            <param name="fileName">文件名,包含扩展名</param>
        </member>
        <member name="M:Util.Web.Download(System.String,System.String,System.Text.Encoding)">
            <summary>
            下载
            </summary>
            <param name="text">文本</param>
            <param name="fileName">文件名,包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Web.Download(System.IO.Stream,System.String)">
            <summary>
            下载
            </summary>
            <param name="stream">流</param>
            <param name="fileName">文件名,包含扩展名</param>
        </member>
        <member name="M:Util.Web.Download(System.IO.Stream,System.String,System.Text.Encoding)">
            <summary>
            下载
            </summary>
            <param name="stream">流</param>
            <param name="fileName">文件名,包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Web.Download(System.Byte[],System.String)">
            <summary>
            下载
            </summary>
            <param name="bytes">字节流</param>
            <param name="fileName">文件名,包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Web.Download(System.Byte[],System.String,System.Text.Encoding)">
            <summary>
            下载
            </summary>
            <param name="bytes">字节流</param>
            <param name="fileName">文件名,包含扩展名</param>
            <param name="encoding">字符编码</param>
        </member>
        <member name="M:Util.Web.GetFileControls">
            <summary>
            获取有效客户端文件控件集合,文件控件必须上传了内容，为空将被忽略,
            注意:Form标记必须加入属性 enctype="multipart/form-data",服务器端才能获取客户端file控件.
            </summary>
        </member>
        <member name="M:Util.Web.GetFileControl">
            <summary>
            获取第一个有效客户端文件控件,文件控件必须上传了内容，为空将被忽略,
            注意:Form标记必须加入属性 enctype="multipart/form-data",服务器端才能获取客户端file控件.
            </summary>
        </member>
        <member name="P:Util.Web.Host">
            <summary>
            获取主机名,即域名，
            范例：用户输入网址http://www.a.com/b.htm?a=1&amp;b=2，
            返回值为: www.a.com
            </summary>
        </member>
    </members>
</doc>
