<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Util.Datas.Sql</name>
    </assembly>
    <members>
        <member name="T:Dappers.CommandFlags">
            <summary>
            Additional state flags that control command behaviour
            </summary>
        </member>
        <member name="F:Dappers.CommandFlags.None">
            <summary>
            No additional flags
            </summary>
        </member>
        <member name="F:Dappers.CommandFlags.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="F:Dappers.CommandFlags.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="F:Dappers.CommandFlags.NoCache">
            <summary>
            Should the plan cache be bypassed?
            </summary>
        </member>
        <member name="T:Dappers.CommandDefinition">
            <summary>
            Represents the key aspects of a sql operation
            </summary>
        </member>
        <member name="M:Dappers.CommandDefinition.#ctor(System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType},Dappers.CommandFlags)">
            <summary>
            Initialize the command definition
            </summary>
        </member>
        <member name="P:Dappers.CommandDefinition.CommandText">
            <summary>
            The command (sql or a stored-procedure name) to execute
            </summary>
        </member>
        <member name="P:Dappers.CommandDefinition.Parameters">
            <summary>
            The parameters associated with the command
            </summary>
        </member>
        <member name="P:Dappers.CommandDefinition.Transaction">
            <summary>
            The active transaction for the command
            </summary>
        </member>
        <member name="P:Dappers.CommandDefinition.CommandTimeout">
            <summary>
            The effective timeout for the command
            </summary>
        </member>
        <member name="P:Dappers.CommandDefinition.CommandType">
            <summary>
            The type of command that the command-text represents
            </summary>
        </member>
        <member name="P:Dappers.CommandDefinition.Buffered">
            <summary>
            Should data be buffered before returning?
            </summary>
        </member>
        <member name="P:Dappers.CommandDefinition.AddToCache">
            <summary>
            Should the plan for this query be cached?
            </summary>
        </member>
        <member name="P:Dappers.CommandDefinition.Flags">
            <summary>
            Additional state flags against this command
            </summary>
        </member>
        <member name="P:Dappers.CommandDefinition.Pipelined">
            <summary>
            Can async queries be pipelined?
            </summary>
        </member>
        <member name="T:Dappers.SqlMapper">
            <summary>
            Dapper, a light weight object mapper for ADO.NET
            </summary>
        </member>
        <member name="F:Dappers.SqlMapper.DataTableTypeNameKey">
            <summary>
            Key used to indicate the type name associated with a DataTable
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.PurgeQueryCache">
            <summary>
            Purge the query cache 
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GetCachedSQLCount">
            <summary>
            Return a count of all the cached queries by dapper
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.GetCachedSQL(System.Int32)">
            <summary>
            Return a list of all the queries cached by dapper
            </summary>
            <param name="ignoreHitCountAbove"></param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.GetHashCollissions">
            <summary>
            Deep diagnostics only: find any hash collisions in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.ResetTypeHandlers">
            <summary>
            Clear the registered type handlers
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.AddTypeMap(System.Type,System.Data.DbType)">
            <summary>
            Configure the specified type to be mapped to a given db-type
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.AddTypeHandler(System.Type,Dappers.SqlMapper.ITypeHandler)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.AddTypeHandlerImpl(System.Type,Dappers.SqlMapper.ITypeHandler,System.Boolean)">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.AddTypeHandler``1(Dappers.SqlMapper.TypeHandler{``0})">
            <summary>
            Configure the specified type to be processed by a custom handler
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GetDbType(System.Object)">
            <summary>
            Get the DbType that maps to a given value
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.Execute(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dappers.SqlMapper.Execute(System.Data.IDbConnection,Dappers.CommandDefinition)">
            <summary>
            Execute parameterized SQL  
            </summary>
            <returns>Number of rows affected</returns>
        </member>
        <member name="M:Dappers.SqlMapper.ExecuteScalar(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dappers.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dappers.SqlMapper.ExecuteScalar(System.Data.IDbConnection,Dappers.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dappers.SqlMapper.ExecuteScalar``1(System.Data.IDbConnection,Dappers.CommandDefinition)">
            <summary>
            Execute parameterized SQL that selects a single value
            </summary>
            <returns>The first cell selected</returns>
        </member>
        <member name="M:Dappers.SqlMapper.ExecuteReader(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
            <example>
            <code>
            <![CDATA[
            DataTable table = new DataTable("MyTable");
            using (var reader = ExecuteReader(cnn, sql, param))
            {
                table.Load(reader);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Dappers.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dappers.CommandDefinition)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dappers.SqlMapper.ExecuteReader(System.Data.IDbConnection,Dappers.CommandDefinition,System.Data.CommandBehavior)">
            <summary>
            Execute parameterized SQL and return an <see cref="T:System.Data.IDataReader"/>
            </summary>
            <returns>An <see cref="T:System.Data.IDataReader"/> that can be used to iterate over the results of the SQL query.</returns>
            <remarks>
            This is typically used when the results of a query are not processed by Dapper, for example, used to fill a <see cref="T:System.Data.DataTable"/>
            or <see cref="T:System.Data.DataSet"/>.
            </remarks>
        </member>
        <member name="M:Dappers.SqlMapper.Query(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Return a list of dynamic objects, reader is closed after the call
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dappers.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dappers.SqlMapper.Query(System.Data.IDbConnection,System.Type,System.String,System.Object,System.Data.IDbTransaction,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Executes a query, returning the data typed as per the Type suggested
            </summary>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dappers.SqlMapper.Query``1(System.Data.IDbConnection,Dappers.CommandDefinition)">
            <summary>
            Executes a query, returning the data typed as per T
            </summary>
            <remarks>the dynamic param may seem a bit odd, but this works around a major usability issue in vs, if it is Object vs completion gets annoying. Eg type new [space] get new object</remarks>
            <returns>A sequence of data of the supplied type; if a basic type (int, string, etc) is queried then the data from the first column in assumed, otherwise an instance is
            created per row, and a direct column-name===member-name mapping is assumed (case insensitive).
            </returns>
        </member>
        <member name="M:Dappers.SqlMapper.QueryMultiple(System.Data.IDbConnection,System.String,System.Object,System.Data.IDbTransaction,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.QueryMultiple(System.Data.IDbConnection,Dappers.CommandDefinition)">
            <summary>
            Execute a command that returns multiple result sets, and access each in turn
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.Query``3(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst">The first type in the record set</typeparam>
            <typeparam name="TSecond">The second type in the record set</typeparam>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.Query``4(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Maps a query to objects
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.Query``5(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 4 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.Query``6(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 5 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.Query``7(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 6 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.Query``8(System.Data.IDbConnection,System.String,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with 7 input parameters
            </summary>
            <typeparam name="TFirst"></typeparam>
            <typeparam name="TSecond"></typeparam>
            <typeparam name="TThird"></typeparam>
            <typeparam name="TFourth"></typeparam>
            <typeparam name="TFifth"></typeparam>
            <typeparam name="TSixth"></typeparam>
            <typeparam name="TSeventh"></typeparam>
            <typeparam name="TReturn"></typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn"></param>
            <param name="commandTimeout"></param>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.Query``1(System.Data.IDbConnection,System.String,System.Type[],System.Func{System.Object[],``0},System.Object,System.Data.IDbTransaction,System.Boolean,System.String,System.Nullable{System.Int32},System.Nullable{System.Data.CommandType})">
            <summary>
            Perform a multi mapping query with arbitrary input parameters
            </summary>
            <typeparam name="TReturn">The return type</typeparam>
            <param name="cnn"></param>
            <param name="sql"></param>
            <param name="types">array of types in the record set</param>
            <param name="map"></param>
            <param name="param"></param>
            <param name="transaction"></param>
            <param name="buffered"></param>
            <param name="splitOn">The Field we should split and read the second object from (default: id)</param>
            <param name="commandTimeout">Number of seconds before command execution timeout</param>
            <param name="commandType">Is it a stored proc or a batch?</param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.ReadChar(System.Object)">
            <summary>
            Internal use only
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.ReadNullableChar(System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.FindOrAddParameter(System.Data.IDataParameterCollection,System.Data.IDbCommand,System.String)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.PackListParameters(System.Data.IDbCommand,System.String,System.Object)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.ReplaceLiterals(Dappers.SqlMapper.IParameterLookup,System.Data.IDbCommand)">
            <summary>
            Replace all literal tokens with their text form
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.Format(System.Object)">
            <summary>
            Convert numeric values to their string form for SQL literal purposes
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.CreateParamInfoGenerator(Dappers.SqlMapper.Identity,System.Boolean,System.Boolean)">
            <summary>
            Internal use only
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GetTypeMap(System.Type)">
            <summary>
            Gets type-map for the given type
            </summary>
            <returns>Type map implementation, DefaultTypeMap instance if no override present</returns>
        </member>
        <member name="M:Dappers.SqlMapper.SetTypeMap(System.Type,Dappers.SqlMapper.ITypeMap)">
            <summary>
            Set custom mapping for type deserializers
            </summary>
            <param name="type">Entity type to override</param>
            <param name="map">Mapping rules impementation, null to remove custom map</param>
        </member>
        <member name="M:Dappers.SqlMapper.GetTypeDeserializer(System.Type,System.Data.IDataReader,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Internal use only
            </summary>
            <param name="type"></param>
            <param name="reader"></param>
            <param name="startBound"></param>
            <param name="length"></param>
            <param name="returnNullIfFirstMissing"></param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.ThrowDataException(System.Exception,System.Int32,System.Data.IDataReader,System.Object)">
            <summary>
            Throws a data exception, only used internally
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.AsTableValuedParameter(System.Data.DataTable,System.String)">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.SetTypeName(System.Data.DataTable,System.String)">
            <summary>
            Associate a DataTable with a type name
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GetTypeName(System.Data.DataTable)">
            <summary>
            Fetch the type name associated with a DataTable
            </summary>
        </member>
        <member name="E:Dappers.SqlMapper.QueryCachePurged">
            <summary>
            Called if the query cache is purged via PurgeQueryCache
            </summary>
        </member>
        <member name="P:Dappers.SqlMapper.ConnectionStringComparer">
            <summary>
            How should connection strings be compared for equivalence? Defaults to StringComparer.Ordinal.
            Providing a custom implementation can be useful for allowing multi-tenancy databases with identical
            schema to share strategies. Note that usual equivalence rules apply: any equivalent connection strings
            <b>MUST</b> yield the same hash-code.
            </summary>
        </member>
        <member name="T:Dappers.SqlMapper.IDynamicParameters">
            <summary>
            Implement this interface to pass an arbitrary db specific set of parameters to Dapper
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.IDynamicParameters.AddParameters(System.Data.IDbCommand,Dappers.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="T:Dappers.SqlMapper.IParameterLookup">
            <summary>
            Extends IDynamicParameters providing by-name lookup of parameter values
            </summary>
        </member>
        <member name="P:Dappers.SqlMapper.IParameterLookup.Item(System.String)">
            <summary>
            Get the value of the specified parameter (return null if not found)
            </summary>
        </member>
        <member name="T:Dappers.SqlMapper.IParameterCallbacks">
            <summary>
            Extends IDynamicParameters with facilities for executing callbacks after commands have completed
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.IParameterCallbacks.OnCompleted">
            <summary>
            Invoked when the command has executed
            </summary>
        </member>
        <member name="T:Dappers.SqlMapper.ICustomQueryParameter">
            <summary>
            Implement this interface to pass an arbitrary db specific parameter to Dapper
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.ICustomQueryParameter.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter needed to the command before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="name">Parameter name</param>
        </member>
        <member name="T:Dappers.SqlMapper.ITypeHandler">
            <summary>
            Implement this interface to perform custom type-based parameter handling and value parsing
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.ITypeHandler.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dappers.SqlMapper.ITypeHandler.Parse(System.Type,System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <param name="destinationType">The type to parse to</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dappers.SqlMapper.UdtTypeHandler">
            <summary>
            A type handler for data-types that are supported by the underlying provider, but which need
            a well-known UdtTypeName to be specified
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.UdtTypeHandler.#ctor(System.String)">
            <summary>
            Creates a new instance of UdtTypeHandler with the specified UdtTypeName
            </summary>
        </member>
        <member name="T:Dappers.SqlMapper.TypeHandler`1">
            <summary>
            Base-class for simple type-handlers
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.TypeHandler`1.SetValue(System.Data.IDbDataParameter,`0)">
            <summary>
            Assign the value of a parameter before a command executes
            </summary>
            <param name="parameter">The parameter to configure</param>
            <param name="value">Parameter value</param>
        </member>
        <member name="M:Dappers.SqlMapper.TypeHandler`1.Parse(System.Object)">
            <summary>
            Parse a database value back to a typed value
            </summary>
            <param name="value">The value from the database</param>
            <returns>The typed value</returns>
        </member>
        <member name="T:Dappers.SqlMapper.ITypeMap">
            <summary>
            Implement this interface to change default mapping of reader columns to type members
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.ITypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dappers.SqlMapper.ITypeMap.FindExplicitConstructor">
            <summary>
            Returns a constructor which should *always* be used.
            
            Parameters will be default values, nulls for reference types and zero'd for value types.
            
            Use this class to force object creation away from parameterless constructors you don't control.
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.ITypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dappers.SqlMapper.ITypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="T:Dappers.SqlMapper.IMemberMap">
            <summary>
            Implements this interface to provide custom member mapping
            </summary>
        </member>
        <member name="P:Dappers.SqlMapper.IMemberMap.ColumnName">
            <summary>
            Source DataReader column name
            </summary>
        </member>
        <member name="P:Dappers.SqlMapper.IMemberMap.MemberType">
            <summary>
             Target member type
            </summary>
        </member>
        <member name="P:Dappers.SqlMapper.IMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dappers.SqlMapper.IMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dappers.SqlMapper.IMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dappers.SqlMapper.Link`2">
            <summary>
            This is a micro-cache; suitable when the number of terms is controllable (a few hundred, for example),
            and strictly append-only; you cannot change existing values. All key matches are on **REFERENCE**
            equality. The type is fully thread-safe.
            </summary>
        </member>
        <member name="T:Dappers.SqlMapper.TypeHandlerCache`1">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.TypeHandlerCache`1.Parse(System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.TypeHandlerCache`1.SetValue(System.Data.IDbDataParameter,System.Object)">
            <summary>
            Not intended for direct usage
            </summary>
        </member>
        <member name="T:Dappers.SqlMapper.Identity">
            <summary>
            Identity of a cached query in Dapper, used for extensibility
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.Identity.ForDynamicParameters(System.Type)">
            <summary>
            Create an identity for use with DynamicParameters, internal use only
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.Identity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="F:Dappers.SqlMapper.Identity.sql">
            <summary>
            The sql
            </summary>
        </member>
        <member name="F:Dappers.SqlMapper.Identity.commandType">
            <summary>
            The command type 
            </summary>
        </member>
        <member name="F:Dappers.SqlMapper.Identity.hashCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dappers.SqlMapper.Identity.gridIndex">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dappers.SqlMapper.Identity.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dappers.SqlMapper.Identity.connectionString">
            <summary>
            
            </summary>
        </member>
        <member name="F:Dappers.SqlMapper.Identity.parametersType">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.Identity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dappers.SqlMapper.Identity.Equals(Dappers.SqlMapper.Identity)">
            <summary>
            Compare 2 Identity objects
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="T:Dappers.SqlMapper.LiteralToken">
            <summary>
            Represents a placeholder for a value that should be replaced as a literal value in the resulting sql
            </summary>
        </member>
        <member name="P:Dappers.SqlMapper.LiteralToken.Token">
            <summary>
            The text in the original command that should be replaced
            </summary>
        </member>
        <member name="P:Dappers.SqlMapper.LiteralToken.Member">
            <summary>
            The name of the member referred to by the token
            </summary>
        </member>
        <member name="T:Dappers.SqlMapper.GridReader">
            <summary>
            The grid reader provides interfaces for reading multiple result sets from a Dapper query 
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GridReader.Read(System.Boolean)">
            <summary>
            Read the next grid of results, returned as a dynamic object
            </summary>
            <remarks>Note: each row can be accessed via "dynamic", or by casting to an IDictionary&lt;string,object&gt;</remarks>
        </member>
        <member name="M:Dappers.SqlMapper.GridReader.Read``1(System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GridReader.Read(System.Type,System.Boolean)">
            <summary>
            Read the next grid of results
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GridReader.Read``3(System.Func{``0,``1,``2},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GridReader.Read``4(System.Func{``0,``1,``2,``3},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GridReader.Read``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GridReader.Read``7(System.Func{``0,``1,``2,``3,``4,``5,``6},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GridReader.Read``8(System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.String,System.Boolean)">
            <summary>
            Read multiple objects from a single record set on the grid
            </summary>
        </member>
        <member name="M:Dappers.SqlMapper.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader and command.
            </summary>
        </member>
        <member name="P:Dappers.SqlMapper.GridReader.IsConsumed">
            <summary>
            Has the underlying reader been consumed?
            </summary>
        </member>
        <member name="T:Dappers.DynamicParameters">
            <summary>
            A bag of parameters that can be passed to the Dapper Query and Execute methods
            </summary>
        </member>
        <member name="M:Dappers.DynamicParameters.#ctor">
            <summary>
            construct a dynamic parameter bag
            </summary>
        </member>
        <member name="M:Dappers.DynamicParameters.#ctor(System.Object)">
            <summary>
            construct a dynamic parameter bag
            </summary>
            <param name="template">can be an anonymous type or a DynamicParameters bag</param>
        </member>
        <member name="M:Dappers.DynamicParameters.AddDynamicParams(System.Object)">
            <summary>
            Append a whole object full of params to the dynamic
            EG: AddDynamicParams(new {A = 1, B = 2}) // will add property A and B to the dynamic
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Dappers.DynamicParameters.Add(System.String,System.Object,System.Nullable{System.Data.DbType},System.Nullable{System.Data.ParameterDirection},System.Nullable{System.Int32})">
            <summary>
            Add a parameter to this dynamic parameter list
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="dbType"></param>
            <param name="direction"></param>
            <param name="size"></param>
        </member>
        <member name="M:Dappers.DynamicParameters.AddParameters(System.Data.IDbCommand,Dappers.SqlMapper.Identity)">
            <summary>
            Add all the parameters needed to the command just before it executes
            </summary>
            <param name="command">The raw command prior to execution</param>
            <param name="identity">Information about the query</param>
        </member>
        <member name="M:Dappers.DynamicParameters.Get``1(System.String)">
            <summary>
            Get the value of a parameter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns>The value, note DBNull.Value is not returned, instead the value is returned as null</returns>
        </member>
        <member name="M:Dappers.DynamicParameters.Output``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
            Allows you to automatically populate a target property/field from output parameters. It actually
            creates an InputOutput parameter, so you can still pass data in. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The object whose property/field you wish to populate.</param>
            <param name="expression">A MemberExpression targeting a property/field of the target (or descendant thereof.)</param>
            <param name="dbType"></param>
            <param name="size">The size to set on the parameter. Defaults to 0, or DbString.DefaultLength in case of strings.</param>
            <returns>The DynamicParameters instance</returns>
        </member>
        <member name="P:Dappers.DynamicParameters.RemoveUnused">
            <summary>
            If true, the command-text is inspected and only values that are clearly used are included on the connection
            </summary>
        </member>
        <member name="P:Dappers.DynamicParameters.ParameterNames">
            <summary>
            All the names of the param in the bag, use Get to yank them out
            </summary>
        </member>
        <member name="T:Dappers.TableValuedParameter">
            <summary>
            Used to pass a DataTable as a TableValuedParameter
            </summary>
        </member>
        <member name="M:Dappers.TableValuedParameter.#ctor(System.Data.DataTable)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="M:Dappers.TableValuedParameter.#ctor(System.Data.DataTable,System.String)">
            <summary>
            Create a new instance of TableValuedParameter
            </summary>
        </member>
        <member name="T:Dappers.DbString">
            <summary>
            This class represents a SQL string, it can be used if you need to denote your parameter is a Char vs VarChar vs nVarChar vs nChar
            </summary>
        </member>
        <member name="F:Dappers.DbString.DefaultLength">
            <summary>
            A value to set the default value of strings
            going through Dapper. Default is 4000, any value larger than this
            field will not have the default value applied.
            </summary>
        </member>
        <member name="M:Dappers.DbString.#ctor">
            <summary>
            Create a new DbString
            </summary>
        </member>
        <member name="M:Dappers.DbString.AddParameter(System.Data.IDbCommand,System.String)">
            <summary>
            Add the parameter to the command... internal use only
            </summary>
            <param name="command"></param>
            <param name="name"></param>
        </member>
        <member name="P:Dappers.DbString.IsAnsi">
            <summary>
            Ansi vs Unicode 
            </summary>
        </member>
        <member name="P:Dappers.DbString.IsFixedLength">
            <summary>
            Fixed length 
            </summary>
        </member>
        <member name="P:Dappers.DbString.Length">
            <summary>
            Length of the string -1 for max
            </summary>
        </member>
        <member name="P:Dappers.DbString.Value">
            <summary>
            The value of the string
            </summary>
        </member>
        <member name="T:Dappers.FeatureSupport">
            <summary>
            Handles variances in features per DBMS
            </summary>
        </member>
        <member name="M:Dappers.FeatureSupport.Get(System.Data.IDbConnection)">
            <summary>
            Gets the feature set based on the passed connection
            </summary>
        </member>
        <member name="P:Dappers.FeatureSupport.Arrays">
            <summary>
            True if the db supports array columns e.g. Postgresql
            </summary>
        </member>
        <member name="T:Dappers.SimpleMemberMap">
            <summary>
            Represents simple member map for one of target parameter or property or field to source DataReader column
            </summary>
        </member>
        <member name="M:Dappers.SimpleMemberMap.#ctor(System.String,System.Reflection.PropertyInfo)">
            <summary>
            Creates instance for simple property mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="property">Target property</param>
        </member>
        <member name="M:Dappers.SimpleMemberMap.#ctor(System.String,System.Reflection.FieldInfo)">
            <summary>
            Creates instance for simple field mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="field">Target property</param>
        </member>
        <member name="M:Dappers.SimpleMemberMap.#ctor(System.String,System.Reflection.ParameterInfo)">
            <summary>
            Creates instance for simple constructor parameter mapping
            </summary>
            <param name="columnName">DataReader column name</param>
            <param name="parameter">Target constructor parameter</param>
        </member>
        <member name="P:Dappers.SimpleMemberMap.ColumnName">
            <summary>
            DataReader column name
            </summary>
        </member>
        <member name="P:Dappers.SimpleMemberMap.MemberType">
            <summary>
            Target member type
            </summary>
        </member>
        <member name="P:Dappers.SimpleMemberMap.Property">
            <summary>
            Target property
            </summary>
        </member>
        <member name="P:Dappers.SimpleMemberMap.Field">
            <summary>
            Target field
            </summary>
        </member>
        <member name="P:Dappers.SimpleMemberMap.Parameter">
            <summary>
            Target constructor parameter
            </summary>
        </member>
        <member name="T:Dappers.DefaultTypeMap">
            <summary>
            Represents default type mapping strategy used by Dapper
            </summary>
        </member>
        <member name="M:Dappers.DefaultTypeMap.#ctor(System.Type)">
            <summary>
            Creates default type map
            </summary>
            <param name="type">Entity type</param>
        </member>
        <member name="M:Dappers.DefaultTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Finds best constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Matching constructor or default one</returns>
        </member>
        <member name="M:Dappers.DefaultTypeMap.FindExplicitConstructor">
            <summary>
            Returns the constructor, if any, that has the ExplicitConstructorAttribute on it.
            </summary>
        </member>
        <member name="M:Dappers.DefaultTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Gets mapping for constructor parameter
            </summary>
            <param name="constructor">Constructor to resolve</param>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="M:Dappers.DefaultTypeMap.GetMember(System.String)">
            <summary>
            Gets member mapping for column
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Mapping implementation</returns>
        </member>
        <member name="P:Dappers.DefaultTypeMap.MatchNamesWithUnderscores">
            <summary>
            Should column names like User_Id be allowed to match properties/fields like UserId ?
            </summary>
        </member>
        <member name="T:Dappers.CustomPropertyTypeMap">
            <summary>
            Implements custom property mapping by user provided criteria (usually presence of some custom attribute with column to member mapping)
            </summary>
        </member>
        <member name="M:Dappers.CustomPropertyTypeMap.#ctor(System.Type,System.Func{System.Type,System.String,System.Reflection.PropertyInfo})">
            <summary>
            Creates custom property mapping
            </summary>
            <param name="type">Target entity type</param>
            <param name="propertySelector">Property selector based on target type and DataReader column name</param>
        </member>
        <member name="M:Dappers.CustomPropertyTypeMap.FindConstructor(System.String[],System.Type[])">
            <summary>
            Always returns default constructor
            </summary>
            <param name="names">DataReader column names</param>
            <param name="types">DataReader column types</param>
            <returns>Default constructor</returns>
        </member>
        <member name="M:Dappers.CustomPropertyTypeMap.FindExplicitConstructor">
            <summary>
            Always returns null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dappers.CustomPropertyTypeMap.GetConstructorParameter(System.Reflection.ConstructorInfo,System.String)">
            <summary>
            Not implemented as far as default constructor used for all cases
            </summary>
            <param name="constructor"></param>
            <param name="columnName"></param>
            <returns></returns>
        </member>
        <member name="M:Dappers.CustomPropertyTypeMap.GetMember(System.String)">
            <summary>
            Returns property based on selector strategy
            </summary>
            <param name="columnName">DataReader column name</param>
            <returns>Poperty member map</returns>
        </member>
        <member name="T:Dappers.IWrappedDataReader">
            <summary>
            Describes a reader that controls the lifetime of both a command and a reader,
            exposing the downstream command/reader as properties.
            </summary>
        </member>
        <member name="P:Dappers.IWrappedDataReader.Reader">
            <summary>
            Obtain the underlying reader
            </summary>
        </member>
        <member name="P:Dappers.IWrappedDataReader.Command">
            <summary>
            Obtain the underlying command
            </summary>
        </member>
        <member name="T:Dappers.ExplicitConstructorAttribute">
            <summary>
            Tell Dapper to use an explicit constructor, passing nulls or 0s for all parameters
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.OrCondition">
            <summary>
            Or连接条件
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition">
            <summary>
            Sql条件
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.ISqlCondition">
            <summary>
            Sql条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.ISqlCondition.GetCondition">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition.#ctor">
            <summary>
            初始化Sql条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition.#ctor(System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="condition">条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="name">列名</param>
            <param name="prefix">参数前缀</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition.GetCondition">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition.Create(System.String)">
            <summary>
            创建Sql条件
            </summary>
            <param name="condition">条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition.Create(System.String,System.String,Util.Operator)">
            <summary>
            创建Sql条件
            </summary>
            <param name="name">列名</param>
            <param name="prefix">参数前缀，范例@</param>
            <param name="operator">操作符</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition.GetParamName(System.String)">
            <summary>
            获取参数名
            </summary>
            <param name="column">列名</param>
        </member>
        <member name="P:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition.Condition">
            <summary>
            Sql条件
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition.Name">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.Queries.Builders.Conditions.SqlCondition.Prefix">
            <summary>
            参数前缀
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.OrCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="condition1">条件1</param>
            <param name="condition2">条件2</param>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.AndCondition">
            <summary>
            And连接条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.AndCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="condition1">条件1</param>
            <param name="condition2">条件2</param>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.EqualCondition">
            <summary>
            Sql相等条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.EqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="name">列名</param>
            <param name="prefix">参数前缀</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.EqualCondition.GetCondition">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.GreaterCondition">
            <summary>
            Sql大于条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.GreaterCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="name">列名</param>
            <param name="prefix">参数前缀</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.GreaterCondition.GetCondition">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.GreaterEqualCondition">
            <summary>
            Sql大于等于条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.GreaterEqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="name">列名</param>
            <param name="prefix">参数前缀</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.GreaterEqualCondition.GetCondition">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.LessCondition">
            <summary>
            Sql小于条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.LessCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="name">列名</param>
            <param name="prefix">参数前缀</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.LessCondition.GetCondition">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.LessEqualCondition">
            <summary>
            Sql小于等于条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.LessEqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="name">列名</param>
            <param name="prefix">参数前缀</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.LessEqualCondition.GetCondition">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.LikeCondition">
            <summary>
            Sql模糊条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.LikeCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="name">列名</param>
            <param name="prefix">参数前缀</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.LikeCondition.GetCondition">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.Conditions.NotEqualCondition">
            <summary>
            Sql不相等条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.NotEqualCondition.#ctor(System.String,System.String)">
            <summary>
            初始化Sql条件
            </summary>
            <param name="name">列名</param>
            <param name="prefix">参数前缀</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.Conditions.NotEqualCondition.GetCondition">
            <summary>
            获取条件
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.ISqlBuilder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.From(System.String)">
            <summary>
            设置表名
            </summary>
            <param name="table">表名，可以多表连接，范例：a Join b On a.BId = b.Id</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.Select(System.String)">
            <summary>
            设置列名
            </summary>
            <param name="columns">列名</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.GroupBy(System.String,System.String)">
            <summary>
            设置分组
            </summary>
            <param name="group">分组列名</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.OrderBy(System.String)">
            <summary>
            设置排序
            </summary>
            <param name="order">排序条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.SetPager(System.Int32,System.Int32)">
            <summary>
            设置分页
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param> 
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.SetPager(Util.Domains.Repositories.IPager)">
            <summary>
            设置分页
            </summary>
            <param name="pager">分页对象</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.And(Util.Datas.Sql.Queries.Builders.Conditions.ISqlCondition)">
            <summary>
            使用And连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.And(System.String)">
            <summary>
            使用And连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.Or(Util.Datas.Sql.Queries.Builders.Conditions.ISqlCondition)">
            <summary>
            使用Or连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.Or(System.String)">
            <summary>
            使用Or连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.Filter(System.String,System.Object,Util.Operator)">
            <summary>
            过滤条件
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.Equal(System.String,System.Object)">
            <summary>
            以相等条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.NotEqual(System.String,System.Object)">
            <summary>
            以不相等条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.Greater(System.String,System.Object)">
            <summary>
            以大于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.Less(System.String,System.Object)">
            <summary>
            以小于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.GreaterEqual(System.String,System.Object)">
            <summary>
            以大于等于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.LessEqual(System.String,System.Object)">
            <summary>
            以小于等于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.Contains(System.String,System.Object)">
            <summary>
            以头尾匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.Starts(System.String,System.Object)">
            <summary>
            以头匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.Ends(System.String,System.Object)">
            <summary>
            以尾匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.In(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            In过滤
            </summary>
            <param name="name">列名</param>
            <param name="values">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.GetPredicate">
            <summary>
            获取谓词
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.GetParams">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.GetSql">
            <summary>
            生成Sql
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.ISqlBuilder.GetCountSql">
            <summary>
            生成获取总行数的Sql
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.ISqlQuery">
            <summary>
            基于Sql语句的查询对象
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.NewSqlBuilder">
            <summary>
            创建一个新的Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.GetSqlBuilder">
            <summary>
            获取Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.Select(System.String)">
            <summary>
            设置列名
            </summary>
            <param name="columns">列名</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.GroupBy(System.String,System.String)">
            <summary>
            设置分组
            </summary>
            <param name="group">分组列名</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.OrderBy(System.String)">
            <summary>
            设置排序
            </summary>
            <param name="order">排序条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.And(System.String)">
            <summary>
            使用And连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.Or(System.String)">
            <summary>
            使用Or连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.Filter(System.String,System.Object,Util.Operator)">
            <summary>
            过滤条件
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.Equal(System.String,System.Object)">
            <summary>
            以相等条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.NotEqual(System.String,System.Object)">
            <summary>
            以不相等条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.Greater(System.String,System.Object)">
            <summary>
            以大于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.Less(System.String,System.Object)">
            <summary>
            以小于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.GreaterEqual(System.String,System.Object)">
            <summary>
            以大于等于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.LessEqual(System.String,System.Object)">
            <summary>
            以小于等于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.Contains(System.String,System.Object)">
            <summary>
            以头尾匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.Starts(System.String,System.Object)">
            <summary>
            以头匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.Ends(System.String,System.Object)">
            <summary>
            以尾匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.In(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            In过滤
            </summary>
            <param name="name">列名</param>
            <param name="values">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.GetList``1(System.String,System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="table">表名，可以多表连接，范例：a Join b On a.BId = b.Id</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.GetPageList``1(System.String,System.Data.IDbConnection,System.Int32,System.Int32)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="table">表名，可以多表连接，范例：a Join b On a.BId = b.Id</param>
            <param name="connection">数据库连接</param>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param> 
        </member>
        <member name="M:Util.Datas.Sql.Queries.ISqlQuery.GetPageList``1(System.String,System.Data.IDbConnection,Util.Domains.Repositories.IPager)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="table">表名，可以多表连接，范例：a Join b On a.BId = b.Id</param>
            <param name="connection">数据库连接</param>
            <param name="pager">分页对象</param>
        </member>
        <member name="T:Util.Datas.Sql.Queries.Builders.SqlBuilderBase">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.#ctor">
            <summary>
            初始化Sql生成器
            </summary>
        </member>
        <member name="F:Util.Datas.Sql.Queries.Builders.SqlBuilderBase._condition">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="F:Util.Datas.Sql.Queries.Builders.SqlBuilderBase._params">
            <summary>
            参数列表
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.From(System.String)">
            <summary>
            设置表名
            </summary>
            <param name="table">表名，可以多表连接，范例：a Join b On a.BId = b.Id</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Select(System.String)">
            <summary>
            设置列名
            </summary>
            <param name="columns">列名</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GroupBy(System.String,System.String)">
            <summary>
            设置分组
            </summary>
            <param name="group">分组列名</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.OrderBy(System.String)">
            <summary>
            设置排序
            </summary>
            <param name="order">排序条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.SetPager(System.Int32,System.Int32)">
            <summary>
            设置分页
            </summary>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param> 
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.SetPager(Util.Domains.Repositories.IPager)">
            <summary>
            设置分页
            </summary>
            <param name="pager">分页对象</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.And(Util.Datas.Sql.Queries.Builders.Conditions.ISqlCondition)">
            <summary>
            使用And连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.And(System.String)">
            <summary>
            使用And连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Or(Util.Datas.Sql.Queries.Builders.Conditions.ISqlCondition)">
            <summary>
            使用Or连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Or(System.String)">
            <summary>
            使用Or连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Filter(System.String,System.Object,Util.Operator)">
            <summary>
            过滤条件
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.IsValid(System.String,System.Object)">
            <summary>
            验证参数
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetParamPrefix">
            <summary>
            获取参数前缀
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.AddParam(System.String,System.Object,Util.Operator)">
            <summary>
            添加参数
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Equal(System.String,System.Object)">
            <summary>
            以相等条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.NotEqual(System.String,System.Object)">
            <summary>
            以不相等条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Greater(System.String,System.Object)">
            <summary>
            以大于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Less(System.String,System.Object)">
            <summary>
            以小于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GreaterEqual(System.String,System.Object)">
            <summary>
            以大于等于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.LessEqual(System.String,System.Object)">
            <summary>
            以小于等于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Contains(System.String,System.Object)">
            <summary>
            以头尾匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Starts(System.String,System.Object)">
            <summary>
            以头匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Ends(System.String,System.Object)">
            <summary>
            以尾匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.In(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            In过滤
            </summary>
            <param name="name">列名</param>
            <param name="values">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.AddIn(System.Text.StringBuilder,System.String,System.Object,System.Int32)">
            <summary>
            添加In过滤条件
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetSelect">
            <summary>
            获取Select子句
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetColumns">
            <summary>
            获取列名
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetFrom">
            <summary>
            获取From子句
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetWhere">
            <summary>
            获取Where子句
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetGroupBy">
            <summary>
            获取分组子句
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetOrderBy">
            <summary>
            获取排序子句
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetPredicate">
            <summary>
            获取谓词
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetParams">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetSql">
            <summary>
            生成Sql
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.ValidateSql">
            <summary>
            验证Sql有效性
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetSql(System.Text.StringBuilder)">
            <summary>
            获取Sql
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.GetCountSql">
            <summary>
            生成获取总行数的Sql
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Table">
            <summary>
            表名
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Columns">
            <summary>
            列名
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Order">
            <summary>
            排序条件
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Group">
            <summary>
            分组字段
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Having">
            <summary>
            分组条件
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.Queries.Builders.SqlBuilderBase.Pager">
            <summary>
            分页对象
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.Queries.SqlQueryBase">
            <summary>
            基于Sql语句的查询对象
            </summary>
        </member>
        <member name="F:Util.Datas.Sql.Queries.SqlQueryBase._builder">
            <summary>
            Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.NewSqlBuilder">
            <summary>
            创建一个新的Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.CreateSqlBuilder">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.GetSqlBuilder">
            <summary>
            获取Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.Select(System.String)">
            <summary>
            设置列名
            </summary>
            <param name="columns">列名</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.GroupBy(System.String,System.String)">
            <summary>
            设置分组
            </summary>
            <param name="group">分组列名</param>
            <param name="having">分组条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.OrderBy(System.String)">
            <summary>
            设置排序
            </summary>
            <param name="order">排序条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.And(System.String)">
            <summary>
            使用And连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.Or(System.String)">
            <summary>
            使用Or连接条件
            </summary>
            <param name="condition">过滤条件</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.Filter(System.String,System.Object,Util.Operator)">
            <summary>
            过滤条件
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
            <param name="operator">运算符</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.Equal(System.String,System.Object)">
            <summary>
            以相等条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.NotEqual(System.String,System.Object)">
            <summary>
            以不相等条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.Greater(System.String,System.Object)">
            <summary>
            以大于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.Less(System.String,System.Object)">
            <summary>
            以小于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.GreaterEqual(System.String,System.Object)">
            <summary>
            以大于等于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.LessEqual(System.String,System.Object)">
            <summary>
            以小于等于条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.Contains(System.String,System.Object)">
            <summary>
            以头尾匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.Starts(System.String,System.Object)">
            <summary>
            以头匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.Ends(System.String,System.Object)">
            <summary>
            以尾匹配条件过滤
            </summary>
            <param name="name">列名</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.In(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            In过滤
            </summary>
            <param name="name">列名</param>
            <param name="values">值</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.GetList``1(System.String,System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="table">表名，可以多表连接，范例：a Join b On a.BId = b.Id</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.GetPageList``1(System.String,System.Data.IDbConnection,System.Int32,System.Int32)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="table">表名，可以多表连接，范例：a Join b On a.BId = b.Id</param>
            <param name="connection">数据库连接</param>
            <param name="page">页索引</param>
            <param name="pageSize">每页显示行数</param> 
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.GetPageList``1(System.String,System.Data.IDbConnection,Util.Domains.Repositories.IPager)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="table">表名，可以多表连接，范例：a Join b On a.BId = b.Id</param>
            <param name="connection">数据库连接</param>
            <param name="pager">分页对象</param>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.Count(System.Data.IDbConnection,Util.Domains.Repositories.IPager)">
            <summary>
            获取总行数
            </summary>
        </member>
        <member name="M:Util.Datas.Sql.Queries.SqlQueryBase.PagerQuery``1(System.Data.IDbConnection,Util.Domains.Repositories.IPager)">
            <summary>
            分页查询
            </summary>
        </member>
        <member name="T:Util.Datas.Sql.SqlResource">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.SqlResource.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.SqlResource.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.SqlResource.PagerOrderIsEmpty">
            <summary>
              查找类似 分页查询必须设置排序字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:Util.Datas.Sql.SqlResource.TableIsEmpty">
            <summary>
              查找类似 表名必须设置 的本地化字符串。
            </summary>
        </member>
    </members>
</doc>
